import{_ as s,o as n,c as a,X as l}from"./chunks/framework.b5b468c2.js";const C=JSON.parse('{"title":"实现一个简易的reactive","description":"","frontmatter":{"title":"实现一个简易的reactive","author":"DBAAZzz","date":"2024/12/18 15:48","categories":["vue3"],"tags":["reactivity"]},"headers":[],"relativePath":"courses/从0开始学vue3/01-基础语法/02-实现一个简易的reactive.md","filePath":"courses/从0开始学vue3/01-基础语法/02-实现一个简易的reactive.md","lastUpdated":1741625905000}'),p={name:"courses/从0开始学vue3/01-基础语法/02-实现一个简易的reactive.md"},o=l(`<h1 id="简易的-reactive-的实现" tabindex="-1">简易的 reactive 的实现 <a class="header-anchor" href="#简易的-reactive-的实现" aria-label="Permalink to &quot;简易的 reactive 的实现&quot;">​</a></h1><p>响应式思路：</p><p>1、定义某个数据为响应式数据，它会拥有收集访问它的函数的能力。<strong>「依赖收集」</strong></p><p>2、定义观察函数（<code>effect</code>），在这个函数内部去访问响应式数据，访问到响应式数据的某个 key 的时候，会建立一个依赖关系 <strong>key -&gt; reaction</strong> 观察函数。</p><p>3、检测到响应式数据的 key 的值更新的时候，会去重新执行一遍它所收集的所有 reaction 观察函数。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">num</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reactive</span><span style="color:#ADBAC7;">({ a: </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, b: </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">effect</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(num.a)</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">effect</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(num.b)</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">div</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">{</span><span style="color:#ADBAC7;">{num.a}</span><span style="color:#F47067;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">div</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">template</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 收集到的数据格式应该是：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// reactiveMap = {</span></span>
<span class="line"><span style="color:#768390;">//   [object Object]: {</span></span>
<span class="line"><span style="color:#768390;">//      [key]: new Set()</span></span>
<span class="line"><span style="color:#768390;">//   }</span></span>
<span class="line"><span style="color:#768390;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// reactiveMap = {</span></span>
<span class="line"><span style="color:#768390;">//   num: {</span></span>
<span class="line"><span style="color:#768390;">//      a: [sideEffect, sideEffect],</span></span>
<span class="line"><span style="color:#768390;">//      b: [sideEffect]</span></span>
<span class="line"><span style="color:#768390;">//   }</span></span>
<span class="line"><span style="color:#768390;">// }</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">num</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reactive</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#998418;">a</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#998418;">b</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">effect</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">num</span><span style="color:#999999;">.</span><span style="color:#B07D48;">a</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">effect</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">num</span><span style="color:#999999;">.</span><span style="color:#B07D48;">b</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">template</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">div</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">{{</span><span style="color:#393A34;">num.</span><span style="color:#B07D48;">a</span><span style="color:#999999;">}}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">div</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">template</span><span style="color:#999999;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 收集到的数据格式应该是：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// reactiveMap = {</span></span>
<span class="line"><span style="color:#A0ADA0;">//   [object Object]: {</span></span>
<span class="line"><span style="color:#A0ADA0;">//      [key]: new Set()</span></span>
<span class="line"><span style="color:#A0ADA0;">//   }</span></span>
<span class="line"><span style="color:#A0ADA0;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// reactiveMap = {</span></span>
<span class="line"><span style="color:#A0ADA0;">//   num: {</span></span>
<span class="line"><span style="color:#A0ADA0;">//      a: [sideEffect, sideEffect],</span></span>
<span class="line"><span style="color:#A0ADA0;">//      b: [sideEffect]</span></span>
<span class="line"><span style="color:#A0ADA0;">//   }</span></span>
<span class="line"><span style="color:#A0ADA0;">// }</span></span></code></pre></div><p>让我们停下来重新思考，reactive 中需要收集访问该对象的函数，在 reactive 函数中如何获取这个关键的函数呢？</p><p>effect 函数接受一个回调函数，当回调函数运行时，如果它访问了响应式数据，reactive 就会将该回调函数收集起来，用于后续的依赖追踪。</p><p>在执行回调函数之前，我们可以设置一个全局变量 activeEffect，将当前即将执行的副作用函数赋值给它。在响应式对象的 get 操作中，借助 activeEffect 收集依赖。回调函数执行完毕后，立即将 activeEffect 重置为 null，以避免影响其他依赖的收集过程。</p><h2 id="reactive-的实现" tabindex="-1">reactive 的实现 <a class="header-anchor" href="#reactive-的实现" aria-label="Permalink to &quot;reactive 的实现&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">reactive</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Proxy</span><span style="color:#ADBAC7;">(raw, baseHandlers)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">reactive</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> new </span><span style="color:#59873A;">Proxy</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">baseHandlers</span><span style="color:#999999;">)</span></span></code></pre></div><p>这个 <code>baseHandlers</code> 里就是对于数据的 get、set 之类的劫持。</p><p>这里有两个 WeakMap： proxyToRaw 和 rawToProxy， 可以看到在定义响应式数据为一个 Proxy 的时候，会进行一个双向的存储， 这样后续无论是拿到原始对象还是拿到响应式 proxy，都可以很容易的拿到它们的另一半。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { proxyToRaw, rawToProxy, shouldInstrument } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@/internals&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { getHandlers } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@/handlers&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { Raw, ReactiveProxy } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;types&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { storeObservable } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@/store&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reactive</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Raw</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#F69D50;">raw</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 已经被定义成响应式proxy了 或者传入的是内置对象 就直接原封不动的返回</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (proxyToRaw.</span><span style="color:#DCBDFB;">has</span><span style="color:#ADBAC7;">(raw) </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">shouldInstrument</span><span style="color:#ADBAC7;">(raw)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> raw</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 如果这个原始对象已经被定义过响应式 就返回存储的响应式proxy</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">existProxy</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> rawToProxy.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(raw)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (existProxy) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> existProxy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 新建响应式proxy</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createReactive</span><span style="color:#ADBAC7;">(raw)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createReactive</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Raw</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#F69D50;">raw</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">reactive</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Proxy</span><span style="color:#ADBAC7;">(raw, </span><span style="color:#DCBDFB;">getHandlers</span><span style="color:#ADBAC7;">(raw))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 双向存储原始值和响应式proxy的映射</span></span>
<span class="line"><span style="color:#ADBAC7;">  rawToProxy.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(raw, reactive)</span></span>
<span class="line"><span style="color:#ADBAC7;">  proxyToRaw.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(reactive, raw)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 建立一个映射</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 原始值 -&gt; 存储这个原始值的各个key收集到的依赖函数的Map</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 也就是上文中 reactiveMap 数据结构的key</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">storeObservable</span><span style="color:#ADBAC7;">(raw)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 返回响应式proxy</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> reactive </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">raw</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ReactiveProxy</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#F69D50;">proxy</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> proxyToRaw.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(proxy) </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">proxyToRaw</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">rawToProxy</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">shouldInstrument</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">@/internals</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">getHandlers</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">@/handlers</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Raw</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ReactiveProxy</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">types</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">storeObservable</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">@/store</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reactive</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Raw</span><span style="color:#999999;">&gt;(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 已经被定义成响应式proxy了 或者传入的是内置对象 就直接原封不动的返回</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">proxyToRaw</span><span style="color:#999999;">.</span><span style="color:#59873A;">has</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!</span><span style="color:#59873A;">shouldInstrument</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">raw</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果这个原始对象已经被定义过响应式 就返回存储的响应式proxy</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">existProxy</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">rawToProxy</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">existProxy</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">existProxy</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">as</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 新建响应式proxy</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createReactive</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createReactive</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Raw</span><span style="color:#999999;">&gt;(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">reactive</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> new </span><span style="color:#59873A;">Proxy</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">getHandlers</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 双向存储原始值和响应式proxy的映射</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">rawToProxy</span><span style="color:#999999;">.</span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reactive</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">proxyToRaw</span><span style="color:#999999;">.</span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">reactive</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">raw</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 建立一个映射</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 原始值 -&gt; 存储这个原始值的各个key收集到的依赖函数的Map</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 也就是上文中 reactiveMap 数据结构的key</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">storeObservable</span><span style="color:#999999;">(</span><span style="color:#B07D48;">raw</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 返回响应式proxy</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reactive</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">as</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">raw</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ReactiveProxy</span><span style="color:#999999;">&gt;(</span><span style="color:#B07D48;">proxy</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">proxyToRaw</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">proxy</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">as</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>proxy 代理的 getHandlers 处理</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">wellKnownSymbols</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Set</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  Object.</span><span style="color:#DCBDFB;">getOwnPropertyNames</span><span style="color:#ADBAC7;">(Symbol)</span></span>
<span class="line"><span style="color:#ADBAC7;">    .</span><span style="color:#DCBDFB;">map</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">key</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> Symbol[key])</span></span>
<span class="line"><span style="color:#ADBAC7;">    .</span><span style="color:#DCBDFB;">filter</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">value</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> value </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;symbol&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/** 劫持get访问 收集依赖 */</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Raw</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Key</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">receiver</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ReactiveProxy</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(target, key, receiver)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 内置的Symbol不观察</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> key </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;symbol&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> wellKnownSymbols.</span><span style="color:#DCBDFB;">has</span><span style="color:#ADBAC7;">(key)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 收集依赖</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerRunningReaction</span><span style="color:#ADBAC7;">({ target, key, receiver, type: </span><span style="color:#96D0FF;">&#39;get&#39;</span><span style="color:#ADBAC7;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 如果访问的是对象 则返回这个对象的响应式proxy</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 如果没有就重新调用reactive新建一个proxy</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">reativeResult</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> rawToProxy.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(result)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isObject</span><span style="color:#ADBAC7;">(result)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (reativeResult) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> reativeResult</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reactive</span><span style="color:#ADBAC7;">(result)</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/** 劫持一些遍历访问 比如Object.keys */</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ownKeys</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Raw</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerRunningReaction</span><span style="color:#ADBAC7;">({ target, type: </span><span style="color:#96D0FF;">&#39;iterate&#39;</span><span style="color:#ADBAC7;"> })</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">ownKeys</span><span style="color:#ADBAC7;">(target)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/** 劫持set访问 触发收集到的观察函数 */</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Raw</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Key</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">value</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">receiver</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ReactiveProxy</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 确保原始值里不要被响应式对象污染</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isObject</span><span style="color:#ADBAC7;">(value)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> proxyToRaw.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(value) </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> value</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 先检查一下这个key是不是新增的</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">hadKey</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> hasOwnProperty.</span><span style="color:#DCBDFB;">call</span><span style="color:#ADBAC7;">(target, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 拿到旧值</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">oldValue</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> target[key]</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 设置新值</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(target, key, value, receiver)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">hadKey) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 新增key值时以type: add触发观察函数</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">queueReactionsForOperation</span><span style="color:#ADBAC7;">({ target, key, value, receiver, type: </span><span style="color:#96D0FF;">&#39;add&#39;</span><span style="color:#ADBAC7;"> })</span></span>
<span class="line"><span style="color:#ADBAC7;">  } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (value </span><span style="color:#F47067;">!==</span><span style="color:#ADBAC7;"> oldValue) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 已存在的key的值发生变化时以type: set触发观察函数</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">queueReactionsForOperation</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">      target,</span></span>
<span class="line"><span style="color:#ADBAC7;">      key,</span></span>
<span class="line"><span style="color:#ADBAC7;">      value,</span></span>
<span class="line"><span style="color:#ADBAC7;">      oldValue,</span></span>
<span class="line"><span style="color:#ADBAC7;">      receiver,</span></span>
<span class="line"><span style="color:#ADBAC7;">      type: </span><span style="color:#96D0FF;">&#39;set&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    })</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/** 劫持删除操作 触发收集到的观察函数 */</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">deleteProperty</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Raw</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Key</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 先检查一下是否存在这个key</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">hadKey</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> hasOwnProperty.</span><span style="color:#DCBDFB;">call</span><span style="color:#ADBAC7;">(target, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 拿到旧值</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">oldValue</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> target[key]</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 删除这个属性</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">deleteProperty</span><span style="color:#ADBAC7;">(target, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 只有这个key存在的时候才触发更新</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (hadKey) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// type为delete的话 会触发遍历相关的观察函数更新</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">queueReactionsForOperation</span><span style="color:#ADBAC7;">({ target, key, oldValue, type: </span><span style="color:#96D0FF;">&#39;delete&#39;</span><span style="color:#ADBAC7;"> })</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">baseHandlers</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  get,</span></span>
<span class="line"><span style="color:#ADBAC7;">  set,</span></span>
<span class="line"><span style="color:#ADBAC7;">  ownKeys,</span></span>
<span class="line"><span style="color:#ADBAC7;">  deleteProperty,</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">wellKnownSymbols</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> new </span><span style="color:#59873A;">Set</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">getOwnPropertyNames</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Symbol</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#999999;">.</span><span style="color:#59873A;">map</span><span style="color:#999999;">((</span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Symbol</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#999999;">.</span><span style="color:#59873A;">filter</span><span style="color:#999999;">((</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> typeof </span><span style="color:#B07D48;">value</span><span style="color:#AB5959;"> === </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">symbol</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">/** 劫持get访问 收集依赖 */</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Raw</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Key</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ReactiveProxy</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 内置的Symbol不观察</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">symbol</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wellKnownSymbols</span><span style="color:#999999;">.</span><span style="color:#59873A;">has</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 收集依赖</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerRunningReaction</span><span style="color:#999999;">({ </span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">, </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">, </span><span style="color:#998418;">type</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">get</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果访问的是对象 则返回这个对象的响应式proxy</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果没有就重新调用reactive新建一个proxy</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">reativeResult</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">rawToProxy</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isObject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">reativeResult</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reativeResult</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reactive</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">/** 劫持一些遍历访问 比如Object.keys */</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ownKeys</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Raw</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerRunningReaction</span><span style="color:#999999;">({ </span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#998418;">type</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">iterate</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> })</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">ownKeys</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">/** 劫持set访问 触发收集到的观察函数 */</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Raw</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Key</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ReactiveProxy</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 确保原始值里不要被响应式对象污染</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isObject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">proxyToRaw</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 先检查一下这个key是不是新增的</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">hadKey</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">hasOwnProperty</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 拿到旧值</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">oldValue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 设置新值</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">value</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">hadKey</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 新增key值时以type: add触发观察函数</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">queueReactionsForOperation</span><span style="color:#999999;">({ </span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">, </span><span style="color:#B07D48;">value</span><span style="color:#999999;">, </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">, </span><span style="color:#998418;">type</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">add</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> })</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!==</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 已存在的key的值发生变化时以type: set触发观察函数</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">queueReactionsForOperation</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">value</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#998418;">type</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">set</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    })</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">/** 劫持删除操作 触发收集到的观察函数 */</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">deleteProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Raw</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Key</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 先检查一下是否存在这个key</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">hadKey</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">hasOwnProperty</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 拿到旧值</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">oldValue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 删除这个属性</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">deleteProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 只有这个key存在的时候才触发更新</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">hadKey</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// type为delete的话 会触发遍历相关的观察函数更新</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">queueReactionsForOperation</span><span style="color:#999999;">({ </span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">, </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">, </span><span style="color:#998418;">type</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">delete</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> })</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> const </span><span style="color:#B07D48;">baseHandlers</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">get</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">set</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">ownKeys</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">deleteProperty</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/** 值更新时触发观察函数 */</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">queueReactionsForOperation</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">operation</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Operation</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">getReactionsForOperation</span><span style="color:#ADBAC7;">(operation).</span><span style="color:#DCBDFB;">forEach</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">reaction</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reaction</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/** 值更新时触发观察函数 */</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">queueReactionsForOperation</span><span style="color:#999999;">(</span><span style="color:#B07D48;">operation</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Operation</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">getReactionsForOperation</span><span style="color:#999999;">(</span><span style="color:#B07D48;">operation</span><span style="color:#999999;">).</span><span style="color:#59873A;">forEach</span><span style="color:#999999;">((</span><span style="color:#B07D48;">reaction</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reaction</span><span style="color:#999999;">())</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>get 就是收集访问该响应式数据的 effect 回调函数，set 则是触发之前收集到的 effect 回调函数</p><h2 id="effect-函数的实现" tabindex="-1">effect 函数的实现 <a class="header-anchor" href="#effect-函数的实现" aria-label="Permalink to &quot;effect 函数的实现&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> activeEffect </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">effect</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">fn</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Function</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ReactionFunction</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">reactEffect</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ReactiveEffect</span><span style="color:#ADBAC7;">(fn)</span></span>
<span class="line"><span style="color:#ADBAC7;">  reactEffect.</span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">() </span><span style="color:#768390;">//第一次立刻执行副作用函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 先执行一遍reaction</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">reaction</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 返回出去 让外部也可以手动调用</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> reaction</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">//存放副作用的类</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ReactiveEffect</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">constructor</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">fn</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">scheduler</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.fn </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fn</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.scheduler </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> scheduler </span><span style="color:#768390;">//调度器</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">//执行之前先修改activeEffect</span></span>
<span class="line"><span style="color:#ADBAC7;">      activeEffect </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">fn</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    } </span><span style="color:#F47067;">finally</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">//执行完设置activeEffect为null</span></span>
<span class="line"><span style="color:#ADBAC7;">      activeEffect </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">activeEffect</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">effect</span><span style="color:#999999;">(</span><span style="color:#59873A;">fn</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Function</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ReactionFunction</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">reactEffect</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> new </span><span style="color:#59873A;">ReactiveEffect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">fn</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">reactEffect</span><span style="color:#999999;">.</span><span style="color:#59873A;">run</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//第一次立刻执行副作用函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 先执行一遍reaction</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">reaction</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 返回出去 让外部也可以手动调用</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reaction</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//存放副作用的类</span></span>
<span class="line"><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ReactiveEffect</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">constructor</span><span style="color:#999999;">(</span><span style="color:#B07D48;">fn</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">scheduler</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">fn</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fn</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">scheduler</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">scheduler</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//调度器</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">run</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">//执行之前先修改activeEffect</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">activeEffect</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">finally</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">//执行完设置activeEffect为null</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">activeEffect</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://pjuejin.cn/post/6844904050014552072#heading-14" target="_blank" rel="noreferrer">带你彻底搞懂 Vue3 的 Proxy 响应式原理！TypeScript 从零实现基于 Proxy 的响应式库</a></p>`,22),e=[o];function c(t,r,y,A,B,D){return n(),a("div",null,e)}const F=s(p,[["render",c]]);export{C as __pageData,F as default};
