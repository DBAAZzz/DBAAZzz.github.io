import{_ as s,o as a,c as l,X as n}from"./chunks/framework.b5b468c2.js";const u=JSON.parse('{"title":"requestIdleCallback","description":"","frontmatter":{"title":"requestIdleCallback","author":"DBAAZzz","date":"2025/03/31 11:00","categories":["requestIdleCallback"],"tags":["requestIdleCallback"]},"headers":[],"relativePath":"courses/杂项/01-KON!/04-requestIdleCallback.md","filePath":"courses/杂项/01-KON!/04-requestIdleCallback.md","lastUpdated":1743417010000}'),e={name:"courses/杂项/01-KON!/04-requestIdleCallback.md"},o=n(`<h1 id="requestidlecallback-api-总结" tabindex="-1">requestIdleCallback API 总结 <a class="header-anchor" href="#requestidlecallback-api-总结" aria-label="Permalink to &quot;requestIdleCallback API 总结&quot;">​</a></h1><p>请求浏览器在主线程空闲时执行 callback 函数。用于执行低优先级、非关键性的后台任务，而不会影响动画、输入响应等关键用户体验。</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p><code>requestIdleCallback</code> 是一个 Web API，<strong>允许开发者在浏览器事件循环的空闲时段内调度后台任务执行</strong>，确保这些任务不会干扰关键操作，如输入处理、动画和帧合成。</p><h2 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-label="Permalink to &quot;目的&quot;">​</a></h2><p>该 API 帮助开发者协作式地调度以下类型的后台任务：</p><ul><li>非时间敏感型（指的是那些不需要立即执行、可以延迟处理且不会明显影响用户体验或页面功能的任务）</li><li>可能需要较长时间执行</li><li>不应延迟高优先级操作的任务（这类任务指的是如果执行时间过长或调度不当，会直接影响用户体验或页面核心功能的任务。）</li></ul><h2 id="相比传统方法的优势" tabindex="-1">相比传统方法的优势 <a class="header-anchor" href="#相比传统方法的优势" aria-label="Permalink to &quot;相比传统方法的优势&quot;">​</a></h2><p>使用 <code>requestIdleCallback</code> 相比传统方法（如 <code>setTimeout</code>）提供以下优势：</p><ol><li><strong>明确空闲时间通知</strong>：该 API 明确告知浏览器回调可以延迟到空闲时间执行</li><li><strong>截止时间提示</strong>：浏览器提供时间余量，帮助代码判断可执行时长而不影响用户体验</li><li><strong>优化任务执行</strong>：仅在真正空闲时执行回调，而非强制在任意时间点运行</li><li><strong>提升性能</strong>：减少频繁向事件循环添加小任务的开销</li></ol><h2 id="空闲时段" tabindex="-1">空闲时段 <a class="header-anchor" href="#空闲时段" aria-label="Permalink to &quot;空闲时段&quot;">​</a></h2><p>空闲时段发生在浏览器主线程完成当前帧所有关键任务后，直到出现以下情况前的间隔：</p><ul><li>新一帧渲染开始</li><li>其他待处理任务需要执行</li><li>接收到用户输入</li></ul><p>主要有两种类型的空闲时段：</p><ol><li><strong>帧间空闲</strong>：动画帧渲染间隙（在 60Hz 显示器上通常 &lt;16ms）</li><li><strong>延长空闲</strong>：无屏幕更新时的空闲期，最长不超过 50ms</li></ol><p>50ms 上限基于人类感知研究，该研究表明 100ms 内的响应被认为是即时的，这使浏览器能够响应可能在空闲回调期间发生的用户输入。</p><h2 id="api-接口" tabindex="-1">API 接口 <a class="header-anchor" href="#api-接口" aria-label="Permalink to &quot;API 接口&quot;">​</a></h2><h3 id="window-接口扩展" tabindex="-1">Window 接口扩展 <a class="header-anchor" href="#window-接口扩展" aria-label="Permalink to &quot;Window 接口扩展&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">partial </span><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Window</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  unsigned long </span><span style="color:#DCBDFB;">requestIdleCallback</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">IdleRequestCallback</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">callback</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                                   </span><span style="color:#F69D50;">optional</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">IdleRequestOptions</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">options</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {});</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">cancelIdleCallback</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">unsigned</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">long</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">handle</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">partial</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Window</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">unsigned</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">long</span><span style="color:#393A34;"> </span><span style="color:#59873A;">requestIdleCallback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">IdleRequestCallback</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">callback</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">                                   </span><span style="color:#B07D48;">optional</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">IdleRequestOptions</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">options</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{});</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">void</span><span style="color:#393A34;"> </span><span style="color:#59873A;">cancelIdleCallback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">unsigned</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">long</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">handle</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><h3 id="回调类型" tabindex="-1">回调类型 <a class="header-anchor" href="#回调类型" aria-label="Permalink to &quot;回调类型&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">callback IdleRequestCallback </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> (IdleDeadline deadline);</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">callback</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">IdleRequestCallback</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">void</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">IdleDeadline</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">deadline</span><span style="color:#999999;">);</span></span></code></pre></div><h3 id="选项字典" tabindex="-1">选项字典 <a class="header-anchor" href="#选项字典" aria-label="Permalink to &quot;选项字典&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">dictionary IdleRequestOptions {</span></span>
<span class="line"><span style="color:#ADBAC7;">  unsigned long timeout;</span></span>
<span class="line"><span style="color:#ADBAC7;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">dictionary</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">IdleRequestOptions</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">unsigned</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">long</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">timeout</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><h3 id="idledeadline-接口" tabindex="-1">IdleDeadline 接口 <a class="header-anchor" href="#idledeadline-接口" aria-label="Permalink to &quot;IdleDeadline 接口&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">IdleDeadline</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  DOMHighResTimeStamp </span><span style="color:#DCBDFB;">timeRemaining</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">readonly</span><span style="color:#ADBAC7;"> attribute boolean </span><span style="color:#F69D50;">didTimeout</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">IdleDeadline</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">DOMHighResTimeStamp</span><span style="color:#393A34;"> </span><span style="color:#59873A;">timeRemaining</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">attribute</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">boolean</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">didTimeout</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><h3 id="基本示例" tabindex="-1">基本示例 <a class="header-anchor" href="#基本示例" aria-label="Permalink to &quot;基本示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">backgroundTask</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">deadline</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 在此处执行后台工作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 检查是否有剩余时间</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (deadline.</span><span style="color:#DCBDFB;">timeRemaining</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> deadline.didTimeout) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 继续执行任务</span></span>
<span class="line"><span style="color:#ADBAC7;">  } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 若需要更多时间则重新调度</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">requestIdleCallback</span><span style="color:#ADBAC7;">(backgroundTask);</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 调度后台任务</span></span>
<span class="line"><span style="color:#DCBDFB;">requestIdleCallback</span><span style="color:#ADBAC7;">(backgroundTask);</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">backgroundTask</span><span style="color:#999999;">(</span><span style="color:#B07D48;">deadline</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 在此处执行后台工作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 检查是否有剩余时间</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">deadline</span><span style="color:#999999;">.</span><span style="color:#59873A;">timeRemaining</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">deadline</span><span style="color:#999999;">.</span><span style="color:#B07D48;">didTimeout</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 继续执行任务</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 若需要更多时间则重新调度</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">requestIdleCallback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">backgroundTask</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 调度后台任务</span></span>
<span class="line"><span style="color:#59873A;">requestIdleCallback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">backgroundTask</span><span style="color:#999999;">);</span></span></code></pre></div><p>回调函数会接收一个 <code>IdleDeadline</code> 对象，包含 <code>timeRemaining()</code> 方法（告诉你当前空闲时间还剩多少）和 <code>didTimeout</code> 属性（告知是否因为超时而被强制执行）。</p><p>应检查 <code>timeRemaining()</code>，如果时间不足，应将任务拆分，并在下一个 <code>requestIdleCallback</code> 中继续。</p><h3 id="带超时选项" tabindex="-1">带超时选项 <a class="header-anchor" href="#带超时选项" aria-label="Permalink to &quot;带超时选项&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#DCBDFB;">requestIdleCallback</span><span style="color:#ADBAC7;">(backgroundTask, { timeout: </span><span style="color:#6CB6FF;">2000</span><span style="color:#ADBAC7;"> });</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">requestIdleCallback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">backgroundTask</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#998418;">timeout</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2000</span><span style="color:#393A34;"> </span><span style="color:#999999;">});</span></span></code></pre></div><p>如果到了超时时间回调还没被执行，浏览器会强制将其加入任务队列尽快执行（但此时可能就不在空闲时段了，可能会影响性能）</p><h2 id="关键行为" tabindex="-1">关键行为 <a class="header-anchor" href="#关键行为" aria-label="Permalink to &quot;关键行为&quot;">​</a></h2><ol><li><strong>FIFO 执行</strong>：回调在空闲时段内按先进先出顺序运行</li><li><strong>不保证执行</strong>：若系统持续繁忙，回调可能不会执行</li><li><strong>超时保障</strong>：通过 timeout 参数确保最长延迟（即使无空闲时段）</li><li><strong>单次执行</strong>：每个回调仅在一个空闲时段执行一次</li><li><strong>循环调度机制</strong>：重新调度的回调会进入队列末尾</li><li><strong>节能优化</strong>：当页面不可见时，浏览器可能会限制空闲时段以减少电量消耗</li></ol><h2 id="隐私和安全考量" tabindex="-1">隐私和安全考量 <a class="header-anchor" href="#隐私和安全考量" aria-label="Permalink to &quot;隐私和安全考量&quot;">​</a></h2><ul><li><code>IdleDeadline</code> 的时间精度会根据跨源隔离能力进行调整，防止时序攻击</li><li>不会暴露比其他 Web API 更多的时序信息</li></ul>`,37),p=[o];function t(c,r,i,d,y,A){return a(),l("div",null,p)}const h=s(e,[["render",t]]);export{u as __pageData,h as default};
