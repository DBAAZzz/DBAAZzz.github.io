import{_ as s,o as n,c as a,X as l}from"./chunks/framework.b5b468c2.js";const C=JSON.parse('{"title":"reactivity原理","description":"","frontmatter":{"title":"reactivity原理","author":"DBAAZzz","date":"2024/12/19 15:48","categories":["vue3"],"tags":["reactivity"]},"headers":[],"relativePath":"courses/从0开始学vue3/01-基础语法/03-reactivity原理.md","filePath":"courses/从0开始学vue3/01-基础语法/03-reactivity原理.md","lastUpdated":1741625905000}'),p={name:"courses/从0开始学vue3/01-基础语法/03-reactivity原理.md"},o=l(`<h2 id="reacitve-的实现原理" tabindex="-1">reacitve 的实现原理 <a class="header-anchor" href="#reacitve-的实现原理" aria-label="Permalink to &quot;reacitve 的实现原理&quot;">​</a></h2><p>先看 reactive 方法的实现逻辑，reactive 方法接收一个对象参数，返回一个代理对象。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 用于存储已经代理过的对象，可以对应上一节的 reactiveMap 结构</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">reactiveMap</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">WeakMap</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Target</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">WeakMap</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Target</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reactive</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">object</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 如果试图观察一个只读代理，返回只读版本。</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isReadonly</span><span style="color:#ADBAC7;">(target)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> target</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createReactiveObject</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    target,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    mutableHandlers,</span></span>
<span class="line"><span style="color:#ADBAC7;">    mutableCollectionHandlers,</span></span>
<span class="line"><span style="color:#ADBAC7;">    reactiveMap</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 用于存储已经代理过的对象，可以对应上一节的 reactiveMap 结构</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> const </span><span style="color:#B07D48;">reactiveMap</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">WeakMap</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Target</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt; =</span><span style="color:#AB5959;"> new </span><span style="color:#59873A;">WeakMap</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reactive</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#AB5959;">object</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果试图观察一个只读代理，返回只读版本。</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isReadonly</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">target</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createReactiveObject</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">false</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">mutableHandlers</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">mutableCollectionHandlers</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">reactiveMap</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>reactive 方法中调用了 createReactiveObject 方法，看下 createReactiveObject 方法具体的实现逻辑：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createReactiveObject</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Target</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">isReadonly</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">baseHandlers</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ProxyHandler</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">collectionHandlers</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ProxyHandler</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">proxyMap</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">WeakMap</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Target</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 不能代理非对象</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">isObject</span><span style="color:#ADBAC7;">(target)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> target</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 已经代理过的对象不需要在进行二次代理</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">existingProxy</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> proxyMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(target)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (existingProxy) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> existingProxy</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 为1表示 Array，Object 类型用 baseHandlers 处理</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 为2表示 map、set、weakMap、weakSet 用 collectionHandlers 处理</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">proxy</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Proxy</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    target,</span></span>
<span class="line"><span style="color:#ADBAC7;">    targetType </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> TargetType.</span><span style="color:#6CB6FF;">COLLECTION</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> collectionHandlers </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> baseHandlers</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span></span>
<span class="line"><span style="color:#ADBAC7;">  proxyMap.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(target, proxy)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> proxy</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createReactiveObject</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Target</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">isReadonly</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">baseHandlers</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ProxyHandler</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt;,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">collectionHandlers</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ProxyHandler</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt;,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">proxyMap</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">WeakMap</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Target</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 不能代理非对象</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#59873A;">isObject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">target</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 已经代理过的对象不需要在进行二次代理</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">existingProxy</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">proxyMap</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">existingProxy</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">existingProxy</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 为1表示 Array，Object 类型用 baseHandlers 处理</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 为2表示 map、set、weakMap、weakSet 用 collectionHandlers 处理</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">proxy</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> new </span><span style="color:#59873A;">Proxy</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">targetType</span><span style="color:#AB5959;"> === </span><span style="color:#B07D48;">TargetType</span><span style="color:#999999;">.</span><span style="color:#B07D48;">COLLECTION</span><span style="color:#AB5959;"> ? </span><span style="color:#B07D48;">collectionHandlers</span><span style="color:#AB5959;"> : </span><span style="color:#B07D48;">baseHandlers</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">proxyMap</span><span style="color:#999999;">.</span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">proxy</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">proxy</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>先只看 <code>baseHandlers</code> 的实现逻辑，<code>baseHandlers</code> 是 <code>MutableReactiveHandler</code> 类的实例，它继承了 <code>BaseReactiveHandler</code> <code>类，BaseReactiveHandler</code> 类实现了 <code>ProxyHandler</code> 接口。</p><p><code>BaseReactiveHandler</code> 源码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">BaseReactiveHandler</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ProxyHandler</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Target</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">constructor</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">protected</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">readonly</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">_isReadonly</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">protected</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">readonly</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">_isShallow</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"><span style="color:#ADBAC7;">  ) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Target</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">receiver</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">object</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (key </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> ReactiveFlags.</span><span style="color:#6CB6FF;">SKIP</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> target[ReactiveFlags.</span><span style="color:#6CB6FF;">SKIP</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">isReadonly</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._isReadonly,</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">isShallow</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._isShallow</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (key </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> ReactiveFlags.</span><span style="color:#6CB6FF;">IS_REACTIVE</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">isReadonly</span></span>
<span class="line"><span style="color:#ADBAC7;">    } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (key </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> ReactiveFlags.</span><span style="color:#6CB6FF;">IS_READONLY</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> isReadonly</span></span>
<span class="line"><span style="color:#ADBAC7;">    } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (key </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> ReactiveFlags.</span><span style="color:#6CB6FF;">IS_SHALLOW</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> isShallow</span></span>
<span class="line"><span style="color:#ADBAC7;">    } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (key </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> ReactiveFlags.</span><span style="color:#6CB6FF;">RAW</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span></span>
<span class="line"><span style="color:#ADBAC7;">        receiver </span><span style="color:#F47067;">===</span></span>
<span class="line"><span style="color:#ADBAC7;">          (isReadonly</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> isShallow</span></span>
<span class="line"><span style="color:#ADBAC7;">              </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> shallowReadonlyMap</span></span>
<span class="line"><span style="color:#ADBAC7;">              </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> readonlyMap</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> isShallow</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> shallowReactiveMap</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> reactiveMap</span></span>
<span class="line"><span style="color:#ADBAC7;">          ).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(target) </span><span style="color:#F47067;">||</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// receiver 不是响应式代理，但具有相同的原型</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 这意味着 receiver 是响应式代理的用户代理</span></span>
<span class="line"><span style="color:#ADBAC7;">        Object.</span><span style="color:#DCBDFB;">getPrototypeOf</span><span style="color:#ADBAC7;">(target) </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> Object.</span><span style="color:#DCBDFB;">getPrototypeOf</span><span style="color:#ADBAC7;">(receiver)</span></span>
<span class="line"><span style="color:#ADBAC7;">      ) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> target</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// early return undefined</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">targetIsArray</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isArray</span><span style="color:#ADBAC7;">(target)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">isReadonly) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">fn</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Function</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">undefined</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 如果调用的 push pop shift unshift splice includes indexOf lastIndexOf</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (targetIsArray </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> (fn </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> arrayInstrumentations[key])) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> fn</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (key </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;hasOwnProperty&#39;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> hasOwnProperty</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">res</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      target,</span></span>
<span class="line"><span style="color:#ADBAC7;">      key,</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// if this is a proxy wrapping a ref, return methods using the raw ref</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// as receiver so that we don&#39;t have to call \`toRaw\` on the ref in all</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// its class methods</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(target) </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> target </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> receiver</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isSymbol</span><span style="color:#ADBAC7;">(key) </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> builtInSymbols.</span><span style="color:#DCBDFB;">has</span><span style="color:#ADBAC7;">(key) </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isNonTrackableKeys</span><span style="color:#ADBAC7;">(key)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> res</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 如果不是只读的，就收集依赖</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">isReadonly) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">track</span><span style="color:#ADBAC7;">(target, TrackOpTypes.</span><span style="color:#6CB6FF;">GET</span><span style="color:#ADBAC7;">, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (isShallow) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> res</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 如果是 ref 对象，返回 value 属性实现解包</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(res)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// ref unwrapping - skip unwrap for Array + integer key.</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> targetIsArray </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isIntegerKey</span><span style="color:#ADBAC7;">(key) </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> res </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> res.value</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 如果是对象，递归代理</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isObject</span><span style="color:#ADBAC7;">(res)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> isReadonly </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">readonly</span><span style="color:#ADBAC7;">(res) </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reactive</span><span style="color:#ADBAC7;">(res)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> res</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">BaseReactiveHandler</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">implements</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ProxyHandler</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Target</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">constructor</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">protected</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">_isReadonly</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">protected</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">_isShallow</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">: </span><span style="color:#AB5959;">object</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">any</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">SKIP</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">[</span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">SKIP</span><span style="color:#999999;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">isReadonly</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_isReadonly</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">isShallow</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_isShallow</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IS_REACTIVE</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">isReadonly</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IS_READONLY</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isReadonly</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IS_SHALLOW</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isShallow</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">RAW</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">receiver</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#999999;">(</span><span style="color:#B07D48;">isReadonly</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isShallow</span></span>
<span class="line"><span style="color:#393A34;">              </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">shallowReadonlyMap</span></span>
<span class="line"><span style="color:#393A34;">              </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">readonlyMap</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isShallow</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">shallowReactiveMap</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reactiveMap</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#999999;">).</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#A0ADA0;">// receiver 不是响应式代理，但具有相同的原型</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#A0ADA0;">// 这意味着 receiver 是响应式代理的用户代理</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">getPrototypeOf</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">getPrototypeOf</span><span style="color:#999999;">(</span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">target</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// early return undefined</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">targetIsArray</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">isArray</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">isReadonly</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">let </span><span style="color:#59873A;">fn</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Function</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">undefined</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// 如果调用的 push pop shift unshift splice includes indexOf lastIndexOf</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">targetIsArray</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">fn</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arrayInstrumentations</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fn</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hasOwnProperty</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">hasOwnProperty</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">res</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// if this is a proxy wrapping a ref, return methods using the raw ref</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// as receiver so that we don&#39;t have to call \`toRaw\` on the ref in all</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// its class methods</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> ? </span><span style="color:#B07D48;">target</span><span style="color:#AB5959;"> : </span><span style="color:#B07D48;">receiver</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isSymbol</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">builtInSymbols</span><span style="color:#999999;">.</span><span style="color:#59873A;">has</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isNonTrackableKeys</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 如果不是只读的，就收集依赖</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">isReadonly</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">track</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">TrackOpTypes</span><span style="color:#999999;">.</span><span style="color:#B07D48;">GET</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">isShallow</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 如果是 ref 对象，返回 value 属性实现解包</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// ref unwrapping - skip unwrap for Array + integer key.</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">targetIsArray</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isIntegerKey</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 如果是对象，递归代理</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isObject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isReadonly</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#59873A;">readonly</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reactive</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><code>MutableReactiveHandler</code> 源码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MutableReactiveHandler</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">BaseReactiveHandler</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">constructor</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">isShallow</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">, isShallow)</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Record</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">value</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">receiver</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">object</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> oldValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> target[key]</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._isShallow) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">isOldValueReadonly</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isReadonly</span><span style="color:#ADBAC7;">(oldValue)</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">isShallow</span><span style="color:#ADBAC7;">(value) </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">isReadonly</span><span style="color:#ADBAC7;">(value)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        oldValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">toRaw</span><span style="color:#ADBAC7;">(oldValue)</span></span>
<span class="line"><span style="color:#ADBAC7;">        value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">toRaw</span><span style="color:#ADBAC7;">(value)</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">isArray</span><span style="color:#ADBAC7;">(target) </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(oldValue) </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(value)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (isOldValueReadonly) {</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"><span style="color:#ADBAC7;">        } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">          oldValue.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> value</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#ADBAC7;">    } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// in shallow mode, objects are set as-is regardless of reactive or not</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">hadKey</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">isArray</span><span style="color:#ADBAC7;">(target) </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isIntegerKey</span><span style="color:#ADBAC7;">(key)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Number</span><span style="color:#ADBAC7;">(key) </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> target.</span><span style="color:#6CB6FF;">length</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">hasOwn</span><span style="color:#ADBAC7;">(target, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      target,</span></span>
<span class="line"><span style="color:#ADBAC7;">      key,</span></span>
<span class="line"><span style="color:#ADBAC7;">      value,</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(target) </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> target </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> receiver</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// don&#39;t trigger if target is something up in the prototype chain of original</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (target </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">toRaw</span><span style="color:#ADBAC7;">(receiver)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">hadKey) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 触发更新</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">trigger</span><span style="color:#ADBAC7;">(target, TriggerOpTypes.</span><span style="color:#6CB6FF;">ADD</span><span style="color:#ADBAC7;">, key, value)</span></span>
<span class="line"><span style="color:#ADBAC7;">      } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">hasChanged</span><span style="color:#ADBAC7;">(value, oldValue)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">trigger</span><span style="color:#ADBAC7;">(target, TriggerOpTypes.</span><span style="color:#6CB6FF;">SET</span><span style="color:#ADBAC7;">, key, value, oldValue)</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">deleteProperty</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Record</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span></span>
<span class="line"><span style="color:#ADBAC7;">  )</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">hadKey</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">hasOwn</span><span style="color:#ADBAC7;">(target, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">oldValue</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> target[key]</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">deleteProperty</span><span style="color:#ADBAC7;">(target, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (result </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> hadKey) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">trigger</span><span style="color:#ADBAC7;">(target, TriggerOpTypes.</span><span style="color:#6CB6FF;">DELETE</span><span style="color:#ADBAC7;">, key, </span><span style="color:#6CB6FF;">undefined</span><span style="color:#ADBAC7;">, oldValue)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">has</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Record</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">&gt;, </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">has</span><span style="color:#ADBAC7;">(target, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">isSymbol</span><span style="color:#ADBAC7;">(key) </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">builtInSymbols.</span><span style="color:#DCBDFB;">has</span><span style="color:#ADBAC7;">(key)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">track</span><span style="color:#ADBAC7;">(target, TrackOpTypes.</span><span style="color:#6CB6FF;">HAS</span><span style="color:#ADBAC7;">, key)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">ownKeys</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Record</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">&gt;)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;">)[] {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">track</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      target,</span></span>
<span class="line"><span style="color:#ADBAC7;">      TrackOpTypes.</span><span style="color:#6CB6FF;">ITERATE</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">isArray</span><span style="color:#ADBAC7;">(target) </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;length&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ITERATE_KEY</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">ownKeys</span><span style="color:#ADBAC7;">(target)</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MutableReactiveHandler</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#59873A;">BaseReactiveHandler</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">constructor</span><span style="color:#999999;">(</span><span style="color:#B07D48;">isShallow</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">super</span><span style="color:#999999;">(</span><span style="color:#1E754F;">false</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isShallow</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Record</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">&gt;,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">value</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">: </span><span style="color:#AB5959;">object</span></span>
<span class="line"><span style="color:#999999;">  ):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">boolean</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">let </span><span style="color:#B07D48;">oldValue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_isShallow</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">isOldValueReadonly</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">isReadonly</span><span style="color:#999999;">(</span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#59873A;">isShallow</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!</span><span style="color:#59873A;">isReadonly</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">oldValue</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRaw</span><span style="color:#999999;">(</span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRaw</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#59873A;">isArray</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!</span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">isOldValueReadonly</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// in shallow mode, objects are set as-is regardless of reactive or not</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">hadKey</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#59873A;">isArray</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> &amp;&amp; </span><span style="color:#59873A;">isIntegerKey</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Number</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">&lt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">.</span><span style="color:#998418;">length</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">hasOwn</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">value</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> ? </span><span style="color:#B07D48;">target</span><span style="color:#AB5959;"> : </span><span style="color:#B07D48;">receiver</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// don&#39;t trigger if target is something up in the prototype chain of original</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRaw</span><span style="color:#999999;">(</span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">hadKey</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#A0ADA0;">// 触发更新</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#59873A;">trigger</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">TriggerOpTypes</span><span style="color:#999999;">.</span><span style="color:#B07D48;">ADD</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">hasChanged</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#59873A;">trigger</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">TriggerOpTypes</span><span style="color:#999999;">.</span><span style="color:#B07D48;">SET</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">deleteProperty</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Record</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">&gt;,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span></span>
<span class="line"><span style="color:#999999;">  ):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">boolean</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">hadKey</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">hasOwn</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">oldValue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">deleteProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">hadKey</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">trigger</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">TriggerOpTypes</span><span style="color:#999999;">.</span><span style="color:#B07D48;">DELETE</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">undefined</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">has</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Record</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">&gt;,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">boolean</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">has</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#59873A;">isSymbol</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">builtInSymbols</span><span style="color:#999999;">.</span><span style="color:#59873A;">has</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">track</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">TrackOpTypes</span><span style="color:#999999;">.</span><span style="color:#B07D48;">HAS</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">ownKeys</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Record</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">&gt;):</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#2E8F82;">string</span><span style="color:#393A34;"> </span><span style="color:#999999;">|</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">)[]</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">track</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">TrackOpTypes</span><span style="color:#999999;">.</span><span style="color:#B07D48;">ITERATE</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">isArray</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">length</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ITERATE_KEY</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">ownKeys</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>总结：在执行 <code>effect</code> 时，修改当前 <code>activeEffect</code> 的指向，以便在执行过程中通过 Proxy 的原生 API 拦截 <code>get</code>、<code>has</code>、<code>ownKeys</code> 等操作，完成依赖收集。同时，在 <code>set</code> 和 <code>delete</code> 操作时触发依赖更新。对于边界情况，如修改数组的 length，或使用 pop、push、includes 等方法，也进行了相应的处理。</p><h2 id="ref-的实现原理" tabindex="-1">ref 的实现原理 <a class="header-anchor" href="#ref-的实现原理" aria-label="Permalink to &quot;ref 的实现原理&quot;">​</a></h2><p><code>ref</code> 的源码为：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ref</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">value</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createRef</span><span style="color:#ADBAC7;">(value, </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createRef</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">rawValue</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">shallow</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 如果是 ref 对象，直接返回</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(rawValue)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> rawValue</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">RefImpl</span><span style="color:#ADBAC7;">(rawValue, shallow)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">rawValue</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">shallow</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果是 ref 对象，直接返回</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">rawValue</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">rawValue</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">RefImpl</span><span style="color:#999999;">(</span><span style="color:#B07D48;">rawValue</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">shallow</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>能看出 <code>ref</code> 函数返回的是一个 <code>RefImpl</code> 类的实例，<code>RefImpl</code> 的具体实现为：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">RefImpl</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">_value</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">_rawValue</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">dep</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Dep</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Dep</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">readonly</span><span style="color:#ADBAC7;"> [ReactiveFlags.</span><span style="color:#6CB6FF;">IS_REF</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">readonly</span><span style="color:#ADBAC7;"> [ReactiveFlags.</span><span style="color:#6CB6FF;">IS_SHALLOW</span><span style="color:#ADBAC7;">]</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">constructor</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">value</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">isShallow</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 未代理的value</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._rawValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> isShallow </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> value </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">toRaw</span><span style="color:#ADBAC7;">(value)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 代理过后的value</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> isShallow </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> value </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">toReactive</span><span style="color:#ADBAC7;">(value)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//是否由 shallowRef 创建</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">[ReactiveFlags.</span><span style="color:#6CB6FF;">IS_SHALLOW</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> isShallow</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">get</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">value</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 依赖收集</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.dep.</span><span style="color:#DCBDFB;">track</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._value</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">set</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">value</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">newValue</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">oldValue</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._rawValue</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">useDirectValue</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">[ReactiveFlags.</span><span style="color:#6CB6FF;">IS_SHALLOW</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">||</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">isShallow</span><span style="color:#ADBAC7;">(newValue) </span><span style="color:#F47067;">||</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">isReadonly</span><span style="color:#ADBAC7;">(newValue)</span></span>
<span class="line"><span style="color:#ADBAC7;">    newValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> useDirectValue </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> newValue </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">toRaw</span><span style="color:#ADBAC7;">(newValue)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">hasChanged</span><span style="color:#ADBAC7;">(newValue, oldValue)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._rawValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> newValue</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// toReactive的实现为：</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// return isObject(value) ? reactive(value) : value</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">._value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> useDirectValue </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> newValue </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">toReactive</span><span style="color:#ADBAC7;">(newValue)</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 触发依赖更新</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.dep.</span><span style="color:#DCBDFB;">trigger</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">RefImpl</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">_value</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">T</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">private</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">_rawValue</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">dep</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Dep</span><span style="color:#999999;"> =</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Dep</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">public</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IS_REF</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">public</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IS_SHALLOW</span><span style="color:#999999;">]: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;"> =</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">constructor</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isShallow</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 未代理的value</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_rawValue</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isShallow</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRaw</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 代理过后的value</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_value</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isShallow</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toReactive</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">//是否由 shallowRef 创建</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">[</span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IS_SHALLOW</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isShallow</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">get</span><span style="color:#393A34;"> </span><span style="color:#59873A;">value</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 依赖收集</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">dep</span><span style="color:#999999;">.</span><span style="color:#59873A;">track</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_value</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">set</span><span style="color:#393A34;"> </span><span style="color:#59873A;">value</span><span style="color:#999999;">(</span><span style="color:#B07D48;">newValue</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">oldValue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_rawValue</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">useDirectValue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">[</span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IS_SHALLOW</span><span style="color:#999999;">]</span><span style="color:#AB5959;"> ||</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#59873A;">isShallow</span><span style="color:#999999;">(</span><span style="color:#B07D48;">newValue</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> ||</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#59873A;">isReadonly</span><span style="color:#999999;">(</span><span style="color:#B07D48;">newValue</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">newValue</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useDirectValue</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">newValue</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRaw</span><span style="color:#999999;">(</span><span style="color:#B07D48;">newValue</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">hasChanged</span><span style="color:#999999;">(</span><span style="color:#B07D48;">newValue</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_rawValue</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">newValue</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// toReactive的实现为：</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// return isObject(value) ? reactive(value) : value</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_value</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useDirectValue</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">newValue</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toReactive</span><span style="color:#999999;">(</span><span style="color:#B07D48;">newValue</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// 触发依赖更新</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">dep</span><span style="color:#999999;">.</span><span style="color:#59873A;">trigger</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>也就是说如果 <code>ref</code> 传入的是一个对象，那么这个对象将通过 <code>reactive()</code> 转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的 <code>ref</code>，它们将被深层地解包。</p><p><code>ref</code> 传入基本数据类型会直接返回，通过 <code>getter</code> 实现依赖收集，<code>setter</code> 实现依赖更新。</p><p>官网描述：</p><p><code>ref</code> 对象是可更改的，也就是说你可以为 <code>.value</code> 赋予新的值。它也是响应式的，即所有对 .<code>value</code> 的操作都将被追踪，并且写操作会触发与之相关的副作用。</p><p>如果将一个对象赋值给 <code>ref</code>，那么这个对象将通过 <code>reactive()</code> 转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的 <code>ref</code>，它们将被深层地解包。</p><p>这里可以引申出另外一个问题：reactive 为什么会丢失响应式？</p><h3 id="reactive-为什么会丢失响应式" tabindex="-1">reactive 为什么会丢失响应式？ <a class="header-anchor" href="#reactive-为什么会丢失响应式" aria-label="Permalink to &quot;reactive 为什么会丢失响应式？&quot;">​</a></h3><p>我们知道使用以下代码时 reactive 会丢失响应式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">form</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reactive</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;张三&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  age: </span><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 丢失响应式</span></span>
<span class="line"><span style="color:#ADBAC7;">form </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { name: </span><span style="color:#96D0FF;">&#39;李四&#39;</span><span style="color:#ADBAC7;">, age: </span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">form2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ref</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;张三&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  age: </span><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 不会丢失响应式</span></span>
<span class="line"><span style="color:#ADBAC7;">form2.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { name: </span><span style="color:#96D0FF;">&#39;李四&#39;</span><span style="color:#ADBAC7;">, age: </span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">form</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">reactive</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">name</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">张三</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">age</span><span style="color:#999999;">: </span><span style="color:#2F798A;">18</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 丢失响应式</span></span>
<span class="line"><span style="color:#B07D48;">form</span><span style="color:#393A34;"> </span><span style="color:#999999;">= { </span><span style="color:#998418;">name</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">李四</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">, </span><span style="color:#998418;">age</span><span style="color:#999999;">: </span><span style="color:#2F798A;">20</span><span style="color:#999999;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">form2</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">name</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">张三</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">age</span><span style="color:#999999;">: </span><span style="color:#2F798A;">18</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 不会丢失响应式</span></span>
<span class="line"><span style="color:#B07D48;">form2</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#999999;">= { </span><span style="color:#998418;">name</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">李四</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">, </span><span style="color:#998418;">age</span><span style="color:#999999;">: </span><span style="color:#2F798A;">20</span><span style="color:#999999;"> }</span></span></code></pre></div><p>使用 <code>ref</code> 会返回一个 <code>RefImpl</code> 实例，无论是修改还是重新赋值都会调用 <code>RefImpl</code> 里的 <code>setter</code> 方法，<code>setter</code> 方法里都会经过 <code>reactive</code> 方法处理成响应式对象。</p><p>而 <code>reactive</code> 会通过 <code>creteReactiveObject</code> 方法创建一个 <code>Proxy</code> 对象，并直接返回。对重新赋值时会变成一个新的引用地址，所以会丢失响应式。</p><h2 id="响应式核心-api-的实现" tabindex="-1">响应式核心 API 的实现 <a class="header-anchor" href="#响应式核心-api-的实现" aria-label="Permalink to &quot;响应式核心 API 的实现&quot;">​</a></h2><p>响应式核心 API 除了 reactive 和 ref 外，还有 computed、readonly、watch、watchEffect</p><h3 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">​</a></h3><p>功能描述：接受一个 <code>getter</code> 函数，返回一个只读的响应式 <code>ref</code> 对象。该 <code>ref</code> 通过 <code>.value</code> 暴露 <code>getter</code> 函数的返回值。</p><p>它也可以接受一个带有 <code>get</code> 和 <code>set</code> 函数的对象来创建一个可写的 <code>ref</code> 对象。</p>`,32),e=[o];function c(t,r,y,A,B,D){return n(),a("div",null,e)}const F=s(p,[["render",c]]);export{C as __pageData,F as default};
