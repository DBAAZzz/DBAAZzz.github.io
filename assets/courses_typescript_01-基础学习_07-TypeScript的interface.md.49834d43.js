import{_ as s,o as a,c as n,X as p}from"./chunks/framework.6625828e.js";const D=JSON.parse('{"title":"interface 类型和 type 命令","description":"","frontmatter":{"title":"interface 类型和 type 命令","author":"DBAAZzz","date":"2023/09/25 00:00","categories":["TypeScript入门学习"],"tags":["TypeScript","interface"]},"headers":[],"relativePath":"courses/typescript/01-基础学习/07-TypeScript的interface.md","filePath":"courses/typescript/01-基础学习/07-TypeScript的interface.md","lastUpdated":1711507159000}'),e={name:"courses/typescript/01-基础学习/07-TypeScript的interface.md"},l=p(`<h1 id="interface-类型和-type-命令" tabindex="-1">interface 类型和 type 命令 <a class="header-anchor" href="#interface-类型和-type-命令" aria-label="Permalink to &quot;interface 类型和 type 命令&quot;">​</a></h1><h2 id="interface" tabindex="-1">interface <a class="header-anchor" href="#interface" aria-label="Permalink to &quot;interface&quot;">​</a></h2><p><code>interface</code> 是对象的模版，可以看作是一种类型约定，中文译为“接口”。</p><h3 id="interface-的拓展性" tabindex="-1">interface 的拓展性 <a class="header-anchor" href="#interface-的拓展性" aria-label="Permalink to &quot;interface 的拓展性&quot;">​</a></h3><p><code>interface</code> 可以继承其他的类型，使用 <code>extends</code> 关键字，继承其他的 <code>interface</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Style</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">color</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Shape</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">name</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 可以多种继承</span></span>
<span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Circle</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Style</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">Shape</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">radius</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Style</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">color</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Shape</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">name</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 可以多种继承</span></span>
<span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Circle</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Style</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Shape</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">radius</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h2 id="type-命令-类型别名" tabindex="-1">type 命令（类型别名） <a class="header-anchor" href="#type-命令-类型别名" aria-label="Permalink to &quot;type 命令（类型别名）&quot;">​</a></h2><p><code>type</code> 命令用来定义一个类型的别名。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Point</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">y</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">z</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Point</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">y</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">z</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h3 id="type-的拓展性" tabindex="-1">type 的拓展性 <a class="header-anchor" href="#type-的拓展性" aria-label="Permalink to &quot;type 的拓展性&quot;">​</a></h3><p><code>type</code> 命令可以通过交叉类型（&amp;）与其他类型合并，而不是通过 <code>extend</code></p><h2 id="type-和-interface-的差异和使用场景" tabindex="-1">type 和 interface 的差异和使用场景 <a class="header-anchor" href="#type-和-interface-的差异和使用场景" aria-label="Permalink to &quot;type 和 interface 的差异和使用场景&quot;">​</a></h2><p>在 <code>TypeScript</code> 中 <code>type</code> 和 <code>interface</code> 都可以定义对象的类型或者函数签名。</p><p>但是两个之间有着明显的差异：</p><ul><li><strong>声明合并</strong></li></ul><p><code>interface</code> 支持声明合并，也就是说你可以分散到多个地方声明同一个 <code>interface</code>，<code>TypeScript</code> 会将它们合并为一个接口。</p><ul><li><strong>扩展性</strong></li></ul><p><code>interface</code> 可以通过 <code>extends</code> 关键字扩展其他 <code>interface</code>。 <code>type</code> 可以通过交叉类型（&amp;）与其他类型合并，但不是通过 <code>extends</code>。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p><code>interface</code> 更适合公共 API 的定义，特别是当你希望消费者可以扩展或实现这些 API 时。</p><p><code>type</code> 更适合定义类型别名，包括联合类型、元组类型和其他你不需要扩展的类型。</p><p>如 <code>Vue3</code> 中就是使用 <code>interface</code> 定义 <code>Vue</code> 对象的类型，<code>interface</code> 提供了更好的拓展性和合并声明的能力。</p><p>用户可以通过 <code>interface</code> 的这一个特性轻松的拓展 <code>Vue</code> 的属性。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> axios </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;axios&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">module</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentCustomProperties</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">$http</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> axios;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">$translate</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">axios</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">axios</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ComponentCustomProperties</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">$http</span><span style="color:#999999;">: </span><span style="color:#AB5959;">typeof</span><span style="color:#999999;"> </span><span style="color:#B07D48;">axios</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">$translate</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">) =&gt; </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div>`,24),o=[l];function t(c,r,y,i,A,d){return a(),n("div",null,o)}const C=s(e,[["render",t]]);export{D as __pageData,C as default};
