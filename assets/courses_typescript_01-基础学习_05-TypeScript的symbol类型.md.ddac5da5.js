import{_ as s,o as a,c as n,X as l}from"./chunks/framework.b5b468c2.js";const D=JSON.parse('{"title":"symbol类型","description":"","frontmatter":{"title":"symbol类型","author":"DBAAZzz","date":"2023/09/25 00:00","categories":["TypeScript入门学习"],"tags":["TypeScript","symbol"]},"headers":[],"relativePath":"courses/typescript/01-基础学习/05-TypeScript的symbol类型.md","filePath":"courses/typescript/01-基础学习/05-TypeScript的symbol类型.md","lastUpdated":1710431360000}'),o={name:"courses/typescript/01-基础学习/05-TypeScript的symbol类型.md"},p=l(`<h1 id="typescript-的-symbol-类型" tabindex="-1">TypeScript 的 symbol 类型 <a class="header-anchor" href="#typescript-的-symbol-类型" aria-label="Permalink to &quot;TypeScript 的 symbol 类型&quot;">​</a></h1><p>自 <code>ECMAScript</code> 2015 起，<code>symbol</code> 成为了一种新的原生类型，就像 <code>number</code> 和 <code>string</code> 一样。</p><p><code>symbol</code> 类型的值是通过 <code>Symbol</code> 构造函数创建的。在 <code>TypeScript</code> 里面，<code>Symbol</code> 的类型使用 <code>symbol</code> 表示。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> y</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> y; </span><span style="color:#768390;">// false</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">y</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">y</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// false</span></span></code></pre></div><h2 id="unique-symbol" tabindex="-1">unique symbol <a class="header-anchor" href="#unique-symbol" aria-label="Permalink to &quot;unique symbol&quot;">​</a></h2><p><code>symbol</code> 类型包含所有的 <code>Symbol</code> 值，但是无法表示某一个具体的 <code>Symbol</code> 值。</p><p>比如，<code>5</code> 是一个具体的数值，就用 5 这个字面量来表示，这也是它的值类型。但是，<code>Symbol</code> 值不存在字面量，必须通过变量来引用，所以写不出只包含单个 <code>Symbol</code> 值的那种值类型。</p><p>为了解决这个问题，<code>TypeScript</code> 设计了 <code>symbol</code> 的一个子类型 <code>unique symbol</code>，它表示单个的、某个具体的 <code>Symbol</code> 值。</p><p>因为 <code>unique symbol</code> 表示单个值，所以<strong>这个类型的变量是不能修改值的，只能用 <code>const</code> 命令声明，不能用 <code>let</code> 声明</strong>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 正确</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">unique</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 报错</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> y</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">unique</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 正确</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unique</span><span style="color:#999999;"> </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">y</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unique</span><span style="color:#999999;"> </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span></code></pre></div><p><code>const</code> 命令为变量赋值 <code>Symbol</code> 值时，变量类型默认就是 <code>unique symbol</code>，所以类型可以省略不写。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">unique</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#768390;">// 等同于</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">x</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unique</span><span style="color:#999999;"> </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#A0ADA0;">// 等同于</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">x</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span></code></pre></div><p>每个声明为 <code>unique symbol</code> 类型的变量，它们的值都是不一样的，其实属于两个值类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">a</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">unique</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">b</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">unique</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">symbol</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">a </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> b; </span><span style="color:#768390;">// 报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">a</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unique</span><span style="color:#999999;"> </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">b</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unique</span><span style="color:#999999;"> </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">b</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span></code></pre></div><h2 id="symbol-的类型推断" tabindex="-1">symbol 的类型推断 <a class="header-anchor" href="#symbol-的类型推断" aria-label="Permalink to &quot;symbol 的类型推断&quot;">​</a></h2><p>如果变量声明没有给出类型，<code>TypeScript</code> 会推断某个 <code>Symbol</code> 值变量的类型。</p><p><code>let</code> 命令声明的变量，推断类型为 <code>symbol。</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 类型为 symbol</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 类型为 symbol</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span></code></pre></div><p><code>const</code> 命令声明的变量，推断类型为 <code>unique symbol</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 类型为 unique symbol</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">x</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 类型为 unique symbol</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">x</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span></code></pre></div><p>但是，<code>const</code> 命令声明的变量，如果赋值为另一个 <code>symbol</code> 类型的变量，则推断类型为 <code>symbol</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 类型为 symbol</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">y</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 类型为 symbol</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">y</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">x</span><span style="color:#999999;">;</span></span></code></pre></div><p>let 命令声明的变量，如果赋值为另一个 <code>unique symbol</code> 类型的变量，则推断类型还是 <code>symbol</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">x</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Symbol</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 类型为 symbol</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> y </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">x</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 类型为 symbol</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">y</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">x</span><span style="color:#999999;">;</span></span></code></pre></div>`,24),e=[p];function c(t,y,r,i,A,d){return a(),n("div",null,e)}const m=s(o,[["render",c]]);export{D as __pageData,m as default};
