import{_ as s,o as n,c as a,X as p}from"./chunks/framework.6625828e.js";const d=JSON.parse('{"title":"typeof和keyof的使用","description":"","frontmatter":{"title":"typeof和keyof的使用","author":"DBAAZzz","date":"2025/03/10 17:00:00","categories":["TypeScript入门学习"],"tags":["TypeScript"]},"headers":[],"relativePath":"courses/typescript/01-基础学习/10-typeof和keyof的使用.md","filePath":"courses/typescript/01-基础学习/10-typeof和keyof的使用.md","lastUpdated":1741625905000}'),o={name:"courses/typescript/01-基础学习/10-typeof和keyof的使用.md"},l=p(`<h2 id="typeof-操作符" tabindex="-1">typeof 操作符 <a class="header-anchor" href="#typeof-操作符" aria-label="Permalink to &quot;typeof 操作符&quot;">​</a></h2><p><code>typeof</code> 主要用于获取<strong>获取变量或对象的类型</strong>（<code>作用于真实变量</code>）的类型，常用于类型推导。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">person</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { name: </span><span style="color:#96D0FF;">&#39;Alice&#39;</span><span style="color:#ADBAC7;">, age: </span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;">// 推断出 PersonType 的类型为 { name: string; age: number }</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">PersonType</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> person</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">person</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">name</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Alice</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">, </span><span style="color:#998418;">age</span><span style="color:#999999;">: </span><span style="color:#2F798A;">30</span><span style="color:#999999;"> }</span></span>
<span class="line"><span style="color:#A0ADA0;">// 推断出 PersonType 的类型为 { name: string; age: number }</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">PersonType</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">person</span></span></code></pre></div><h2 id="keyof-操作符" tabindex="-1">keyof 操作符 <a class="header-anchor" href="#keyof-操作符" aria-label="Permalink to &quot;keyof 操作符&quot;">​</a></h2><p><code>keyof</code> 用于<strong>获取某个对象类型</strong>（<code>作用于类型</code>）的所有键（key）作为联合类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Person</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">name</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">age</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">PersonKeys</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">keyof</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Person</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// &quot;name&quot; | &quot;age&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 示例：安全访问对象属性</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getProperty</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">obj</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Person</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">PersonKeys</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> obj[key]; </span><span style="color:#768390;">// key 必须是 Person 的键之一</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Person</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">name</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">age</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">PersonKeys</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">keyof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Person</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &quot;name&quot; | &quot;age&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 示例：安全访问对象属性</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">getProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Person</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">PersonKeys</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">];</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// key 必须是 Person 的键之一</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h2 id="typeof-和-keyof-结合使用" tabindex="-1">typeof 和 keyof 结合使用 <a class="header-anchor" href="#typeof-和-keyof-结合使用" aria-label="Permalink to &quot;typeof 和 keyof 结合使用&quot;">​</a></h2><p>两者结合可以实现更灵活的类型操作。例如，动态获取对象的类型，再提取其键的联合类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">config</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { width: </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">, height: </span><span style="color:#6CB6FF;">200</span><span style="color:#ADBAC7;"> };</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ConfigType</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> config; </span><span style="color:#768390;">// { width: number; height: number }</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ConfigKeys</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">keyof</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ConfigType</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// &quot;width&quot; | &quot;height&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 使用示例：确保函数参数是 config 的键</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">updateConfig</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ConfigKeys</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">value</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  config[key] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> value;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">config</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">width</span><span style="color:#999999;">: </span><span style="color:#2F798A;">100</span><span style="color:#999999;">, </span><span style="color:#998418;">height</span><span style="color:#999999;">: </span><span style="color:#2F798A;">200</span><span style="color:#999999;"> };</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ConfigType</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">config</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// { width: number; height: number }</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ConfigKeys</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">keyof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ConfigType</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &quot;width&quot; | &quot;height&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 使用示例：确保函数参数是 config 的键</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">updateConfig</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ConfigKeys</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">config</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div>`,9),e=[l];function t(c,r,y,A,i,B){return n(),a("div",null,e)}const C=s(o,[["render",t]]);export{d as __pageData,C as default};
