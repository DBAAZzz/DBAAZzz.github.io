import{_ as s,o as a,c as n,X as e}from"./chunks/framework.6625828e.js";const h=JSON.parse('{"title":"副作用和编译器提示注释","description":"","frontmatter":{"title":"副作用和编译器提示注释","author":"DBAAZzz","date":"2024/12/26 20:56","categories":["webpack"],"tags":["sideEffect"]},"headers":[],"relativePath":"courses/杂项/01-KON!/01-副作用和编译器提示注释.md","filePath":"courses/杂项/01-KON!/01-副作用和编译器提示注释.md","lastUpdated":1741625905000}'),l={name:"courses/杂项/01-KON!/01-副作用和编译器提示注释.md"},o=e(`<h1 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h1><p><a href="https://github.com/javascript-compiler-hints/compiler-notations-spec" target="_blank" rel="noreferrer">JavaScript Compiler Hints</a></p><h2 id="副作用" tabindex="-1">副作用 <a class="header-anchor" href="#副作用" aria-label="Permalink to &quot;副作用&quot;">​</a></h2><p>一个函数被认为具有副作用，如果它执行除了返回值以外的任何操作。副作用包括但不限于修改变量或对象、读写文件、进行网络请求以及与 DOM 交互。</p><h2 id="消除副作用的编译器注释" tabindex="-1">消除副作用的编译器注释 <a class="header-anchor" href="#消除副作用的编译器注释" aria-label="Permalink to &quot;消除副作用的编译器注释&quot;">​</a></h2><h3 id="no-side-effects" tabindex="-1"><code>#__NO_SIDE_EFFECTS__</code> <a class="header-anchor" href="#no-side-effects" aria-label="Permalink to &quot;\`#__NO_SIDE_EFFECTS__\`&quot;">​</a></h3><p><code>#__NO_SIDE_EFFECTS__</code> 语法是一种特殊的注释语法，用于指示一个函数是无副作用的，这意味着它对程序状态没有可观察的影响，只返回一个值。此语法允许开发人员和打包器通过将注释函数的每个调用位置视为纯函数来优化代码，从而实现更激进的死代码消除。</p><p>通过使用 <code>#__NO_SIDE_EFFECTS__</code> 符号，开发人员声称被注释的函数没有任何此类副作用。</p><h3 id="pure" tabindex="-1"><code>#__PURE__</code> <a class="header-anchor" href="#pure" aria-label="Permalink to &quot;\`#__PURE__\`&quot;">​</a></h3><p><code>#__PURE__</code> 符号是 JavaScript 打包工具和压缩工具使用的一种特殊注释语法，用于指示一个函数调用或构造函数实例化没有副作用，并且可以在优化过程中安全地移除。该注释使开发人员能够通过移除死代码或未使用的函数来优化他们的代码。</p><p><code>#__PURE__</code> 符号用于 <code>JavaScript</code> 代码中的注释，应放置在其所指的函数调用或构造函数实例化之前。该符号跟随 <code>#__PURE__</code> 或 <code>@__PURE__</code> 关键字，夹在双下划线和双哈希之间。</p><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><h3 id="函数声明" tabindex="-1">函数声明 <a class="header-anchor" href="#函数声明" aria-label="Permalink to &quot;函数声明&quot;">​</a></h3><p><code>#__NO_SIDE_EFFECTS__</code> 符号应当用于标记已知无副作用的函数。它可以应用于函数声明和函数表达式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/*#__NO_SIDE_EFFECTS__*/</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sideEffectFreeFunction</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Function code here</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> myVariable </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">/*#__NO_SIDE_EFFECTS__*/</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> () {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Function code here</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/*#__NO_SIDE_EFFECTS__*/</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">sideEffectFreeFunction</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// Function code here</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">myVariable</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">/*#__NO_SIDE_EFFECTS__*/</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// Function code here</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h3 id="常量变量声明" tabindex="-1">常量变量声明 <a class="header-anchor" href="#常量变量声明" aria-label="Permalink to &quot;常量变量声明&quot;">​</a></h3><p><code>#__NO_SIDE_EFFECTS__</code> 表示法可用于标记具有即时函数赋值的 const 变量。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/*#__NO_SIDE_EFFECTS__*/</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sideEffectFreeVariable</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Function code here</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/*#__NO_SIDE_EFFECTS__*/</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#59873A;">sideEffectFreeVariable</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// Function code here</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h3 id="导出函数声明" tabindex="-1">导出函数声明 <a class="header-anchor" href="#导出函数声明" aria-label="Permalink to &quot;导出函数声明&quot;">​</a></h3><p><code>#__NO_SIDE_EFFECTS__</code> 符号可以用于标记已知没有副作用的函数。它可以应用于导出的函数声明和导出的函数表达式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/*#__NO_SIDE_EFFECTS__*/</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sideEffectFreeFunction</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Function code here</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/*#__NO_SIDE_EFFECTS__*/</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">myVariable</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> () {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// Function code here</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/*#__NO_SIDE_EFFECTS__*/</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">sideEffectFreeFunction</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// Function code here</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">/*#__NO_SIDE_EFFECTS__*/</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#59873A;">myVariable</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// Function code here</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div>`,21),p=[o];function c(t,r,i,_,y,d){return a(),n("div",null,p)}const F=s(l,[["render",c]]);export{h as __pageData,F as default};
