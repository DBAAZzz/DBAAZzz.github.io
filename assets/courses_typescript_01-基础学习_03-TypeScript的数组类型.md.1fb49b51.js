import{_ as s,o as a,c as n,X as p}from"./chunks/framework.b5b468c2.js";const F=JSON.parse('{"title":"数组类型","description":"","frontmatter":{"title":"数组类型","author":"DBAAZzz","date":"2023/09/25 00:00","categories":["TypeScript入门学习"],"tags":["TypeScript","数组"]},"headers":[],"relativePath":"courses/typescript/01-基础学习/03-TypeScript的数组类型.md","filePath":"courses/typescript/01-基础学习/03-TypeScript的数组类型.md","lastUpdated":1710431360000}'),l={name:"courses/typescript/01-基础学习/03-TypeScript的数组类型.md"},o=p(`<h1 id="typescript-的数组类型" tabindex="-1">TypeScript 的数组类型 <a class="header-anchor" href="#typescript-的数组类型" aria-label="Permalink to &quot;TypeScript 的数组类型&quot;">​</a></h1><p><code>TypeScript</code> 数组有一个根本特征：所有成员的类型必须相同，但是成员数量是不确定的，可以是无限数量的成员也可以是零成员。</p><p>数组类型有两种写法：</p><ul><li>一种是在数组成员的类型后面加上一对方括号</li><li>另一种写法是使用 <code>TypeScript</code> 内置的 Array 接口</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> arr1</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">[] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> arr2</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Array</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">arr1</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">[] =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">arr2</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Array</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">&gt; =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">];</span></span></code></pre></div><p><code>TypeScript</code> 和 <code>JavaScript</code> 中数组的成员数量是不做限制的，也就是动态变化的。由于成员数量可以动态变化，所以 <strong>TypeScript 不会对数组边界进行检查，越界访问数组并不会报错</strong>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> arr</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">[] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> foo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> arr[</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// 正确</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">arr</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">[] =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">foo</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">arr</span><span style="color:#999999;">[</span><span style="color:#2F798A;">3</span><span style="color:#999999;">];</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span></code></pre></div><h2 id="数组的类型推断" tabindex="-1">数组的类型推断 <a class="header-anchor" href="#数组的类型推断" aria-label="Permalink to &quot;数组的类型推断&quot;">​</a></h2><p>如果数组变量没有声明类型，<code>TypeScript</code> 就会推断数组成员的类型。这时，推断行为会因为值的不同，而有所不同。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 推断为 any[]</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">arr</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">arr.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">123</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">arr; </span><span style="color:#768390;">// 推断类型为 number[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">arr.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;abc&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">arr; </span><span style="color:#768390;">// 推断类型为 (string|number)[]</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 推断为 any[]</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">arr</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">.</span><span style="color:#59873A;">push</span><span style="color:#999999;">(</span><span style="color:#2F798A;">123</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 推断类型为 number[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">.</span><span style="color:#59873A;">push</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">abc</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 推断类型为 (string|number)[]</span></span></code></pre></div><p>上面的例子中可以看到，随着新成员的加入，<code>TypeScript</code> 会自动修改推断的数组类型。但是，<strong>类型推断的自动更新只会发生在初始值为空数组的情况，如果初始值不是空数组，类型推断就不会更新。</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> arr </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// 推断为number[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">arr.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;4&#39;</span><span style="color:#ADBAC7;">); </span><span style="color:#768390;">// 报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">arr</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">];</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 推断为number[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">.</span><span style="color:#59873A;">push</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">4</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span></code></pre></div><p>可以看到，由于数组的初始值不为空，<code>TypeScript</code> 就推断成员类型为 <code>number</code>，后续数组 push 类型为 <code>string</code> 的变量就会报错。</p><h2 id="只读数组" tabindex="-1">只读数组 <a class="header-anchor" href="#只读数组" aria-label="Permalink to &quot;只读数组&quot;">​</a></h2><p>JavaScript 规定，<code>const</code> 命令声明的数组变量是可以改变成员的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">arr</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">arr[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arr</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">;</span></span></code></pre></div><p>在 <code>TypeScript</code> 中，当我们有声明只读数组的需求时，可以在数组类型的前面加上 <code>readonly</code> 关键字。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">arr</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">readonly</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">[] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">arr[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 报错</span></span>
<span class="line"><span style="color:#ADBAC7;">arr.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">); </span><span style="color:#768390;">// 报错</span></span>
<span class="line"><span style="color:#F47067;">delete</span><span style="color:#ADBAC7;"> arr[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// 报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">arr</span><span style="color:#999999;">: </span><span style="color:#AB5959;">readonly</span><span style="color:#999999;"> </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">[] =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">.</span><span style="color:#59873A;">push</span><span style="color:#999999;">(</span><span style="color:#2F798A;">3</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"><span style="color:#AB5959;">delete</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arr</span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">];</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span></code></pre></div><p><code>TypeScript</code> 将 <code>readonly number[]</code> 与 <code>number[]</code> 视为两种不一样的类型，后者是前者的子类型。</p><p>我们知道，子类型继承了父类型的所有特征，并加上了自己的特征，所以子类型 <code>number[]</code> 可以用于所有使用父类型的场合，反过来就不行。</p><h3 id="只读数组不能和数组的范型写法一起使用" tabindex="-1">只读数组不能和数组的范型写法一起使用 <a class="header-anchor" href="#只读数组不能和数组的范型写法一起使用" aria-label="Permalink to &quot;只读数组不能和数组的范型写法一起使用&quot;">​</a></h3><p>注意，<code>readonly</code> 关键字不能与数组的泛型写法一起使用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 报错</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">arr</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">readonly</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Array</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">arr</span><span style="color:#999999;">: </span><span style="color:#AB5959;">readonly</span><span style="color:#999999;"> </span><span style="color:#2E8F82;">Array</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">&gt; =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">];</span></span></code></pre></div><p><code>TypeScript</code> 提供了两个专门的范型，用来生成只读数组的类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">a1</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ReadonlyArray</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">a2</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Readonly</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">[]&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">a1</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ReadonlyArray</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">&gt; =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">a2</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Readonly</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">[]&gt; =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">];</span></span></code></pre></div>`,25),e=[o];function c(t,r,y,A,i,B){return a(),n("div",null,e)}const C=s(l,[["render",c]]);export{F as __pageData,C as default};
