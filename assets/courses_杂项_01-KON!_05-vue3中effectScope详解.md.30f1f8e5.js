import{_ as s,o as n,c as a,X as p}from"./chunks/framework.6625828e.js";const d=JSON.parse('{"title":"vue3中effectScope详解","description":"","frontmatter":{"title":"vue3中effectScope详解","author":"DBAAZzz","date":"2025/04/17 15:00","categories":["Vue3"],"tags":["Vue3、effectScope"]},"headers":[],"relativePath":"courses/杂项/01-KON!/05-vue3中effectScope详解.md","filePath":"courses/杂项/01-KON!/05-vue3中effectScope详解.md","lastUpdated":1744878420000}'),l={name:"courses/杂项/01-KON!/05-vue3中effectScope详解.md"},o=p(`<h1 id="effectscope-官方文档" tabindex="-1">effectScope(官方文档) <a class="header-anchor" href="#effectscope-官方文档" aria-label="Permalink to &quot;effectScope(官方文档)&quot;">​</a></h1><p>创建一个 <code>effect</code> 作用域，可以捕获其中所创建的响应式副作用 (即<strong>计算属性</strong>和<strong>侦听器</strong>)，这样捕获到的副作用可以一起处理。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">effectScope</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">detached</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">EffectScope</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">EffectScope</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#DCBDFB;">fn</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">undefined</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 如果作用域不活跃就为 undefined</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">stop</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">effectScope</span><span style="color:#999999;">(</span><span style="color:#B07D48;">detached</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">EffectScope</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">EffectScope</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">run</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#999999;">&gt;(</span><span style="color:#59873A;">fn</span><span style="color:#999999;">: () =&gt; </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#999999;">|</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">undefined</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 如果作用域不活跃就为 undefined</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">stop</span><span style="color:#999999;">():</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">void</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>示例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">scope</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">effectScope</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">scope.</span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">doubled</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">computed</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> counter.value </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">watch</span><span style="color:#ADBAC7;">(doubled, () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(doubled.value));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">watchEffect</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Count: &quot;</span><span style="color:#ADBAC7;">, doubled.value));</span></span>
<span class="line"><span style="color:#ADBAC7;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 处理掉当前作用域内的所有 effect</span></span>
<span class="line"><span style="color:#ADBAC7;">scope.</span><span style="color:#DCBDFB;">stop</span><span style="color:#ADBAC7;">();</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">scope</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">effectScope</span><span style="color:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">scope</span><span style="color:#999999;">.</span><span style="color:#59873A;">run</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">doubled</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">computed</span><span style="color:#999999;">(()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#AB5959;"> * </span><span style="color:#2F798A;">2</span><span style="color:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">watch</span><span style="color:#999999;">(</span><span style="color:#B07D48;">doubled</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">doubled</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#999999;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">watchEffect</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">Count: </span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">doubled</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#999999;">));</span></span>
<span class="line"><span style="color:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 处理掉当前作用域内的所有 effect</span></span>
<span class="line"><span style="color:#B07D48;">scope</span><span style="color:#999999;">.</span><span style="color:#59873A;">stop</span><span style="color:#999999;">();</span></span></code></pre></div><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><p>Vue 组件的 <code>setup()</code> 函数会自动管理其中创建的响应式效果，确保组件卸载时这些效果被清理。然而，在组件外部使用响应式系统时，这些自动清理机制不再适用，可能导致内存泄漏。</p><p><code>effectScope</code> 就是用来解决这个问题的。</p><p>它的实际应用场景包括：</p><ol><li>在组件外部创建和管理响应式逻辑，特别是当你需要在组件之外使用响应式系统时</li><li>开发可复用的响应式逻辑（如自定义组合式函数），确保资源能够被正确清理</li><li>将相关的响应式效果分组管理，一次性处理它们的生命周期</li><li>避免内存泄漏，尤其是在动态创建响应式效果的场景中</li><li>开发插件或库时，需要隔离响应式效果并确保它们能够被正确清理</li></ol><p>例如，当你开发一个复杂的状态管理模块时，可以使用 <code>effectScope</code> 来确保所有相关的计算属性和侦听器在不再需要时被正确清理：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// hook.ts</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { ref, effectScope } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;vue&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 创建一个全局的 effectScope</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">globalScope</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">effectScope</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 声明变量但不立即初始化</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> count;</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> add;</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> initialized </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 延迟初始化函数</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ensureInitialized</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">initialized) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    globalScope.</span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      count </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ref</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        count.value</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">      };</span></span>
<span class="line"><span style="color:#ADBAC7;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    initialized </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useFeatureModule</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 首次调用时才初始化</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">ensureInitialized</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    count,</span></span>
<span class="line"><span style="color:#ADBAC7;">    add,</span></span>
<span class="line"><span style="color:#ADBAC7;">  };</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 提供清理函数</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">cleanupFeatureModule</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (initialized) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    globalScope.</span><span style="color:#DCBDFB;">stop</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    initialized </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// hook.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ref</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">effectScope</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 创建一个全局的 effectScope</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">globalScope</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">effectScope</span><span style="color:#999999;">(</span><span style="color:#1E754F;">true</span><span style="color:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 声明变量但不立即初始化</span></span>
<span class="line"><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">count</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">add</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">initialized</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 延迟初始化函数</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ensureInitialized</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">initialized</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">globalScope</span><span style="color:#999999;">.</span><span style="color:#59873A;">run</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">count</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#2F798A;">0</span><span style="color:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">add</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">count</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#AB5959;">++</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">};</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">initialized</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useFeatureModule</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 首次调用时才初始化</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">ensureInitialized</span><span style="color:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">count</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">add</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">};</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 提供清理函数</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">cleanupFeatureModule</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">initialized</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">globalScope</span><span style="color:#999999;">.</span><span style="color:#59873A;">stop</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">initialized</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h2 id="effectscope-与-pinia-的关系" tabindex="-1">effectScope 与 pinia 的关系 <a class="header-anchor" href="#effectscope-与-pinia-的关系" aria-label="Permalink to &quot;effectScope 与 pinia 的关系&quot;">​</a></h2><p><code>effectScope</code> 与 <code>Pinia</code> 的关系是深入且紧密的。<code>Pinia</code> 在其内部架构中大量使用了 <code>effectScope</code> 来管理响应式状态和效果。</p><p>主要的关系点包括：</p><ol><li><p><strong>核心实现机制</strong>：<code>Pinia</code> 在内部使用 <code>effectScope</code> 来创建和管理每个 store 的响应式效果。当你创建一个 <code>Pinia store</code> 时，<code>Pinia</code> 会自动创建一个 <code>effectScope</code> 实例来将该 <code>store</code> 的所有响应式效果（计算属性、侦听器等）包裹在内。</p></li><li><p><strong>自动清理</strong>：当应用卸载或 store 被销毁时，<code>Pinia</code> 利用 <code>effectScope</code> 的 <code>stop()</code> 功能一次性清理所有相关的响应式效果，防止内存泄漏。</p></li><li><p><strong>SSR 支持</strong>：<code>Pinia</code> 使用 <code>effectScope</code> 来实现更好的服务器端渲染支持，确保在服务器端创建的响应式效果不会产生持久性影响。</p></li><li><p><strong>插件系统</strong>：<code>Pinia</code> 的插件系统部分依赖于 <code>effectScope</code> 来管理插件创建的响应式效果。</p></li><li><p><strong>热更新支持</strong>：<code>Pinia</code> 使用 <code>effectScope</code> 来实现开发环境下的热更新功能，使得 <code>store</code> 可以在不丢失状态的情况下重新创建响应式系统。</p></li></ol><p>从技术角度看，可以说 <code>effectScope</code> 是 <code>Pinia</code> 内部响应式系统管理的基础设施，为 <code>Pinia</code> 提供了高效管理响应式效果生命周期的能力。</p><p>这种关系让 <code>Pinia</code> 能够提供更清晰的状态管理体验，同时自动处理内存管理的复杂性，让开发者可以专注于业务逻辑而不是手动管理响应式效果的生命周期。</p>`,18),e=[o];function c(t,r,y,A,i,B){return n(),a("div",null,e)}const C=s(l,[["render",c]]);export{d as __pageData,C as default};
