import{_ as s,o as a,c as n,X as p}from"./chunks/framework.b5b468c2.js";const D=JSON.parse('{"title":"Enum类型","description":"","frontmatter":{"title":"Enum类型","author":"DBAAZzz","date":"2023/09/27 00:00","categories":["TypeScript入门学习"],"tags":["TypeScript"]},"headers":[],"relativePath":"courses/typescript/01-基础学习/08-TypeScript的Enum类型.md","filePath":"courses/typescript/01-基础学习/08-TypeScript的Enum类型.md","lastUpdated":1710431360000}'),l={name:"courses/typescript/01-基础学习/08-TypeScript的Enum类型.md"},o=p(`<h1 id="typescript-的-enum-枚举-类型" tabindex="-1">TypeScript 的 Enum（枚举） 类型 <a class="header-anchor" href="#typescript-的-enum-枚举-类型" aria-label="Permalink to &quot;TypeScript 的 Enum（枚举） 类型&quot;">​</a></h1><p>枚举是 <code>TypesScript</code> 添加到 JavaScript 的一项功能。与大多数 TypeScript 功能不同，<strong>这不是对 JavaScript 的类型级别的拓展，而是对语言和运行时的扩展。</strong></p><p>枚举允许开发人员定义一组命名常量，<code>TypeScript</code> 提供基于数字和字符串的枚举。</p><h2 id="数字枚举" tabindex="-1">数字枚举 <a class="header-anchor" href="#数字枚举" aria-label="Permalink to &quot;数字枚举&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">enum</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Direction</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">Up</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">Down</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">Left</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">Right</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">enum</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Direction</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Up</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Down</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Left</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Right</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>上面，我们定义了一个数字枚举，其中 <code>Up</code> 用来初始化 <code>1</code>。那么 <code>Up</code> 以下所有成员都会自动递增。换句话说，<code>Up</code> 是值 <code>1</code>，<code>Down</code> 是值 <code>2</code>，<code>Left</code> 是值 <code>3</code>，<code>Right</code> 是值 <code>4</code>。</p><h2 id="字符串枚举" tabindex="-1">字符串枚举 <a class="header-anchor" href="#字符串枚举" aria-label="Permalink to &quot;字符串枚举&quot;">​</a></h2><p>在字符串枚举中，每个成员都必须使用字符串文字或另一个字符串枚举成员进行常量初始化。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">enum</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Direction</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">Up</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;UP&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">Down</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;DOWN&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">Left</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;LEFT&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">Right</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;RIGHT&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">enum</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Direction</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Up</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">UP</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Down</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">DOWN</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Left</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">LEFT</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Right</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">RIGHT</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h2 id="反向映射" tabindex="-1">反向映射 <a class="header-anchor" href="#反向映射" aria-label="Permalink to &quot;反向映射&quot;">​</a></h2><p>除了创建具有成员属性名称的对象之外，数字枚举成员还可以获得从枚举值到枚举名称的反向映射。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">enum</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Enum</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">A</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> a </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Enum.</span><span style="color:#6CB6FF;">A</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> nameOfA </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Enum[a]; </span><span style="color:#768390;">// &quot;A&quot;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">enum</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Enum</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">A</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">a</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Enum</span><span style="color:#999999;">.</span><span style="color:#B07D48;">A</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">nameOfA</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Enum</span><span style="color:#999999;">[</span><span style="color:#B07D48;">a</span><span style="color:#999999;">];</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &quot;A&quot;</span></span></code></pre></div><h2 id="keyof-运算符" tabindex="-1">keyof 运算符 <a class="header-anchor" href="#keyof-运算符" aria-label="Permalink to &quot;keyof 运算符&quot;">​</a></h2><p><code>keyof</code> 运算符可以取出 <code>Enum</code> 结构的所有成员名，作为联合类型返回</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">enum</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEnum</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">A</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;a&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">B</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;b&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// &#39;A&#39;|&#39;B&#39;</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Foo</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">keyof</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> MyEnum;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">enum</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyEnum</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">A</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">B</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">b</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// &#39;A&#39;|&#39;B&#39;</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Foo</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">keyof</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">MyEnum</span><span style="color:#999999;">;</span></span></code></pre></div><p>注意，这里的 <code>typeof</code> 是必需的，否则 <code>keyof MyEnum</code> 相当于 <code>keyof number</code>。</p>`,16),e=[o];function c(t,r,y,A,i,B){return a(),n("div",null,e)}const C=s(l,[["render",c]]);export{D as __pageData,C as default};
