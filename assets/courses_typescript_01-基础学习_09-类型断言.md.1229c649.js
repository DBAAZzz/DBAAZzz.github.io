import{_ as s,o as n,c as a,X as p}from"./chunks/framework.6625828e.js";const l="/assets/2023-09-27-5b370a8c6d0cabab78c35b69fd7457db6f61832f0d9f33e809a19166910e1012.5b370a8c.png",C=JSON.parse('{"title":"类型断言","description":"","frontmatter":{"title":"类型断言","author":"DBAAZzz","date":"2023/09/27 00:00","categories":["TypeScript入门学习"],"tags":["TypeScript"]},"headers":[],"relativePath":"courses/typescript/01-基础学习/09-类型断言.md","filePath":"courses/typescript/01-基础学习/09-类型断言.md","lastUpdated":1710431360000}'),o={name:"courses/typescript/01-基础学习/09-类型断言.md"},e=p(`<h1 id="typescript-的类型断言" tabindex="-1">TypeScript 的类型断言 <a class="header-anchor" href="#typescript-的类型断言" aria-label="Permalink to &quot;TypeScript 的类型断言&quot;">​</a></h1><p><code>TypeScript</code> 允许你覆盖它的推断，并且能以你任何你想要的方式分析它，这种机制被称为「类型断言」。<code>TypeScript</code> 类型断言用来告诉编译器你比它更了解这个类型，并且它不应该再发出错误。</p><p>例如：我们使用 <code>document.getElementById</code>，<code>TypeScript</code> 只知道将返回某种 <code>HTMLElement</code>，但我们知道通过 <code>id</code> 始终返回 <code>HTMLCanvasElement</code>，那么我们就可以通过类型断言来实现收窄类型范围。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">myCanvas</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> document.</span><span style="color:#DCBDFB;">getElementById</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;main_canvas&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">HTMLCanvasElement</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">myCanvas</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#59873A;">getElementById</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">main_canvas</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">HTMLCanvasElement</span><span style="color:#999999;">;</span></span></code></pre></div><p>类型断言有两种语法，<strong>尖括号语法</strong>和 <strong><code>as</code> 语法</strong>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 语法一：&lt;类型&gt;值</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Type</span><span style="color:#ADBAC7;">&gt;value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 语法二：值 as 类型</span></span>
<span class="line"><span style="color:#ADBAC7;">value </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Type</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 语法一：&lt;类型&gt;值</span></span>
<span class="line"><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Type</span><span style="color:#999999;">&gt;</span><span style="color:#B07D48;">value</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 语法二：值 as 类型</span></span>
<span class="line"><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">as</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Type</span><span style="color:#999999;">;</span></span></code></pre></div><p>不过&lt;&gt;尖括号语法与 JSX 语法冲突，一般使用 as 语法。</p><h2 id="类型断言和类型转换" tabindex="-1">类型断言和类型转换 <a class="header-anchor" href="#类型断言和类型转换" aria-label="Permalink to &quot;类型断言和类型转换&quot;">​</a></h2><p>类型断言之所以不称为类型转换，是因为转换通常意味着某种运行时的支持。但是，<strong>类型断言纯粹是一个编译时语法。</strong></p><p><strong>类型断言会在编译时被移除，不会在运行时进行类型检查。意味着如果给变量断言了一个不正确的类型并使用，有可能在运行时会报错，所以除非确切的知道变量的数据类型，否则不要使用类型断言。</strong></p><p>那么能在 <code>TypeScript</code> 中进行类型断言的条件是什么呢？答案是：类型断言要求实际的类型与断言的类型兼容，实际类型可以断言为一个更加宽泛的类型（父类型），也可以断言为一个更加精确的类型（子类型），但不能断言为一个完全无关的类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">x</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;hello&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">//报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">x</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//报错</span></span></code></pre></div><h2 id="双重断言" tabindex="-1">双重断言 <a class="header-anchor" href="#双重断言" aria-label="Permalink to &quot;双重断言&quot;">​</a></h2><p>有时候，我们真的要断言一个完全无关的类型，也是可以做到的。那就是连续进行两次类型断言。先断言成 <code>unknow</code> 类型或 <code>any</code> 类型，然后再断言成目标类型。因为 <code>any</code> 类型和 <code>unknown</code> 类型是所有其他类型的父类型，所以可以作为两种完全无关的类型的中介。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 或者写成 &lt;T&gt;&lt;unknown&gt;expr</span></span>
<span class="line"><span style="color:#ADBAC7;">expr </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 或者写成 &lt;T&gt;&lt;unknown&gt;expr</span></span>
<span class="line"><span style="color:#B07D48;">expr</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">as</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">as</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">;</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">x</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;hello&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// success</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">x</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">unknown</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// success</span></span></code></pre></div><p><img src="`+l+`" alt="图 0"></p><h2 id="as-const-断言" tabindex="-1">as const 断言 <a class="header-anchor" href="#as-const-断言" aria-label="Permalink to &quot;as const 断言&quot;">​</a></h2><p>如果没有声明变量类型，<code>let</code> 命令声明的变量，会被类型推断为 <code>TypeScript</code> 内置的基本类型之一；</p><p><strong>const 命令声明的变量，则被推断为值类型常量。</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 类型推断为基本类型 string</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> s1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;JavaScript&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 类型推断为字符串 “JavaScript”</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">s2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;JavaScript&#39;</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 类型推断为基本类型 string</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">s1</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">JavaScript</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 类型推断为字符串 “JavaScript”</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">s2</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">JavaScript</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span></code></pre></div><p><code>TypeScript</code> 提供了一种特殊的类型断言 <code>as const</code>，用于告诉编译器，推断类型时，可以将这个值推断为常量，即把 <code>let</code> 变量断言为 <code>const</code> 变量，从而把内置的基本类型变更为值类型。</p><p>使用 <code>as const</code> 断言后，<code>let</code> 变量就不能再改变值了。如下例子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> s </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;JavaScript&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">s </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Python&#39;</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">s</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">JavaScript</span><span style="color:#B5695999;">&#39;</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> const</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">s</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Python</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span></code></pre></div><h2 id="非空断言" tabindex="-1">非空断言 <a class="header-anchor" href="#非空断言" aria-label="Permalink to &quot;非空断言&quot;">​</a></h2><p>对于那些可能为空的变量（即可能等于 <code>undefined</code> 和 <code>null</code>），<code>TypeScript</code> 提供了非空断言，保证这些变量不会为空，写法是在变量后面加上感叹号!。（表示该值不是 <code>undefined</code> 和 <code>null</code>）</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">liveDangerously</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">x</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// No error</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(x</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toFixed</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">liveDangerously</span><span style="color:#999999;">(</span><span style="color:#B07D48;">x</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// No error</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">x</span><span style="color:#AB5959;">!</span><span style="color:#999999;">.</span><span style="color:#59873A;">toFixed</span><span style="color:#999999;">());</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>非空断言还可以用于赋值断言。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> name</span><span style="color:#F47067;">!:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">name</span><span style="color:#AB5959;">!</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span></code></pre></div><h2 id="断言函数-asserts-修饰符" tabindex="-1">断言函数（asserts 修饰符） <a class="header-anchor" href="#断言函数-asserts-修饰符" aria-label="Permalink to &quot;断言函数（asserts 修饰符）&quot;">​</a></h2><p>断言函数一种特殊的函数，用于保证函数参数符合某种类型。如果函数达不到要求，就会抛出错误，中断程序执行。如果达到要求，就不进行任何操作，让代码按照正常流程运行。</p><p><code>asserts</code> 并不是一个断言函数，它只是一个修饰符（也称为断言签名），以 <code>asserts value</code>、<code>asserts T is xxx</code> 的形式来确定函数的返回类型，只有 <code>asserts</code> 后面的表达式（value 或者 T is xxxx）为 truthy 值，才会返回正常，否则将会抛出异常，终止当前代码的运行。</p><p><code>asserts value</code>是一种简写形式，用来断言某个参数为真（即不等于 <code>false</code>、<code>undefined</code>、<code>null</code>）</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 断言函数</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isString</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">value</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">asserts</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">value</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">is</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> value </span><span style="color:#F47067;">!==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;string&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throw</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Error</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Not a string&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 断言函数</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isString</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#999999;">asserts</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">is</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">string</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!==</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">string</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">throw</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Error</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Not a string</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><code>TypeScript</code> 编译时，会进行<a href="https://github.com/Microsoft/TypeScript/pull/8010" target="_blank" rel="noreferrer">控制流分析</a>，能够根据上下文推断出每个条件分支值的类型。同样的，TS 编译器能够在控制流分析中，根据当前的 <code>asserts</code> 断言分析出后面的类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">yell</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">str</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(str); </span><span style="color:#768390;">// 此时仍是any</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 根据asserts断言分析出后面的str为string</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">isString</span><span style="color:#ADBAC7;">(str);</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> str.</span><span style="color:#DCBDFB;">toUpperCase</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 这里是string</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isString</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">str</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">asserts</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">str</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">is</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> str </span><span style="color:#F47067;">!==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;string&#39;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">throw</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Error</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;not a string&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">yell</span><span style="color:#999999;">(</span><span style="color:#B07D48;">str</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">str</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 此时仍是any</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 根据asserts断言分析出后面的str为string</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">isString</span><span style="color:#999999;">(</span><span style="color:#B07D48;">str</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">str</span><span style="color:#999999;">.</span><span style="color:#59873A;">toUpperCase</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 这里是string</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isString</span><span style="color:#999999;">(</span><span style="color:#B07D48;">str</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#999999;">asserts</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">str</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">is</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">string</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">str</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!==</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">string</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">throw</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Error</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">not a string</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>另外，<strong>断言函数的 <code>asserts</code> 语句等同于 <code>void</code> 类型</strong>，所以如果返回除了 <code>undefined</code> 和 <code>null</code> 以外的值，都会报错。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isString</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">value</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">asserts</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">value</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">is</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> value </span><span style="color:#F47067;">!==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;string&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throw</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Error</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Not a string&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 报错</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isString</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#999999;">asserts</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">is</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">string</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!==</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">string</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">throw</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Error</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Not a string</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h2 id="asserts-修饰符和-is-关键字的区别" tabindex="-1">asserts 修饰符和 is 关键字的区别 <a class="header-anchor" href="#asserts-修饰符和-is-关键字的区别" aria-label="Permalink to &quot;asserts 修饰符和 is 关键字的区别&quot;">​</a></h2><p><code>is</code> 关键字被称为类型谓语，用来判断一个变量是否属于某个接口或类型。一般用于函数的返回类型，并根据结果返回对应的布尔类型。通常用于条件判断。</p><p><code>is</code> 关键字经常用来封装“类型判断函数”，通过缩小和函数返回值的比较，从而缩小参数的类型范围，所以烈性谓语 <code>is</code> 也是一种类型保护</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">yell</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">str</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isString</span><span style="color:#ADBAC7;">(str)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    str.</span><span style="color:#DCBDFB;">toUpperCase</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 这里是string</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isString</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">str</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">str</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">is</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> str </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;string&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">yell</span><span style="color:#999999;">(</span><span style="color:#B07D48;">str</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isString</span><span style="color:#999999;">(</span><span style="color:#B07D48;">str</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">str</span><span style="color:#999999;">.</span><span style="color:#59873A;">toUpperCase</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 这里是string</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isString</span><span style="color:#999999;">(</span><span style="color:#B07D48;">str</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">str</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">is</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">string</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">str</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">string</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div>`,42),t=[e];function c(r,y,A,i,B,d){return n(),a("div",null,t)}const F=s(o,[["render",c]]);export{C as __pageData,F as default};
