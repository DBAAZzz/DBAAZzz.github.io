import{_ as s,o as a,c as p,X as n}from"./chunks/framework.6625828e.js";const D=JSON.parse('{"title":"TypeScript 的模块","description":"","frontmatter":{"title":"TypeScript 的模块","author":"DBAAZzz","date":"2024/03/14 01:00","categories":["TypeScript入门学习"],"tags":["TypeScript"]},"headers":[],"relativePath":"courses/typescript/02-高级进阶/01-TypeScript的模块.md","filePath":"courses/typescript/02-高级进阶/01-TypeScript的模块.md","lastUpdated":1710353247000}'),l={name:"courses/typescript/02-高级进阶/01-TypeScript的模块.md"},o=n(`<h1 id="typescript-的模块" tabindex="-1">TypeScript 的模块 <a class="header-anchor" href="#typescript-的模块" aria-label="Permalink to &quot;TypeScript 的模块&quot;">​</a></h1><p><strong>任何包含 <code>import</code> 或 <code>export</code> 语句的文件，就是一个模块（module）</strong>，如果一个模块文件只需要运行代码，没有需要导出的变量，可以添加一个：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> {};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#999999;">{};</span></span></code></pre></div><p>来形成模块。</p><p>在 Vue3 中需要新增用于增强组件实例类型以支持自定义全局属性，Vue 暴露了一个被设计为可以通过 <strong><code>TypeScript</code> 模块扩展</strong>来扩展的 <code>ComponentCustomProperties</code> 接口，</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> axios </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;axios&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">module</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentCustomProperties</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">$http</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> axios;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">$translate</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">axios</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">axios</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ComponentCustomProperties</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">$http</span><span style="color:#999999;">: </span><span style="color:#AB5959;">typeof</span><span style="color:#999999;"> </span><span style="color:#B07D48;">axios</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">$translate</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">) =&gt; </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 不工作，将覆盖原始类型。</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">module</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentCustomProperties</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">$translate</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 不工作，将覆盖原始类型。</span></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ComponentCustomProperties</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">$translate</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">) =&gt; </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 正确的模块，正常工作。</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">module</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentCustomProperties</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">$translate</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 正确的模块，正常工作。</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#999999;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ComponentCustomProperties</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">$translate</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">) =&gt; </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>具体链接为：<a href="https://cn.vuejs.org/guide/typescript/options-api.html#augmenting-global-properties" target="_blank" rel="noreferrer">指南-拓展全局属性</a></p><h2 id="typescript-中模块的作用" tabindex="-1">TypeScript 中模块的作用 <a class="header-anchor" href="#typescript-中模块的作用" aria-label="Permalink to &quot;TypeScript 中模块的作用&quot;">​</a></h2><p>我们知道给一个文件添加 <code>import</code> 或者 <code>export</code> 就能让文件形成模块，这个模块的作用是什么？</p><p>答案是：<strong>模块本身就是一个作用域，不属于全局作用域。模块内部的变量、函数、类只在内部可见，对于模块外部是不可见的。这样就不会有全局副作用。</strong></p><p>举例说明：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// global.d.ts</span></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> MyGlobalVar</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// file1.ts</span></span>
<span class="line"><span style="color:#ADBAC7;">MyGlobalVar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Hello&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// file2.ts</span></span>
<span class="line"><span style="color:#ADBAC7;">console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(MyGlobalVar); </span><span style="color:#768390;">// output: &quot;Hello&quot;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// global.d.ts</span></span>
<span class="line"><span style="color:#AB5959;">declare var </span><span style="color:#B07D48;">MyGlobalVar</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// file1.ts</span></span>
<span class="line"><span style="color:#B07D48;">MyGlobalVar</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// file2.ts</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">MyGlobalVar</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// output: &quot;Hello&quot;</span></span></code></pre></div><p>在这个例子中，<code>MyGlobalVar</code> 是一个全局变量（在 <code>global.d.t</code>s 文件中声明）。在 <code>file1.ts</code> 脚本中，我们直接给它赋值。由于 <code>file1.ts</code> 是一个脚本文件，它有权限访问和修改全局变量。然后，<code>file2.ts</code> 就能访问到修改后的 <code>MyGlobalVar。</code></p><p>然而，如果我们在 <code>file1.ts</code> 添加 <code>export {}</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> {};</span></span>
<span class="line"><span style="color:#ADBAC7;">MyGlobalVar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Hello&#39;</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#999999;">{};</span></span>
<span class="line"><span style="color:#B07D48;">MyGlobalVar</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span></code></pre></div><p>此时，<code>file1.ts</code> 被视为一个模块，这意味着它无法直接访问或修改全局变量（除非这些变量被显式地导入）。因此，<code>MyGlobalVar</code> 在 <code>file1.ts</code> 中将被视为未定义，反过来也就无法影响 <code>file2.ts</code> 中 <code>MyGlobalVar</code> 的值。</p><p><strong><code>export {}</code> 的作用是预防全局命名空间污染，并确保模块之间的严格封装和隔离。</strong></p><h2 id="import-type-语句" tabindex="-1">import type 语句 <a class="header-anchor" href="#import-type-语句" aria-label="Permalink to &quot;import type 语句&quot;">​</a></h2><p><strong>TypeScript 模块除了支持所有 ES 模块的语法，特别之处在于允许输出和输入类型。</strong></p><p><code>import</code> 在一条语句中，可以同时输入类型和正常接口</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// a.ts</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">A</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">foo</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> a </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">123</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// b.ts</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { A, a } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./a&#39;</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// a.ts</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">A</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">foo</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> let </span><span style="color:#B07D48;">a</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">123</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// b.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">A</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span></code></pre></div><p>这样很不利于区分类型和正常接口，容易造成混淆。为了解决这个问题，<code>TypeScript</code> 引入了两个解决方法。</p><ul><li>第一个方法是在 <code>import</code> 语句输入的类型前面加上 <code>type</code> 关键字。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> A, a } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./a&#39;</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">A</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span></code></pre></div><ul><li>第二个方法是使用 <code>import type</code> 语句，这个语句只用来输入类型，不用来输入正常接口</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 正确</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> { A } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./a&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> b</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">A</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;hello&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 报错</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> { a } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./a&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> b </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> a;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 正确</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">A</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">b</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">A</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">b</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">a</span><span style="color:#999999;">;</span></span></code></pre></div><p>同样的，<code>export</code> 语句也有两种方法，表示输出的是类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">A</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;a&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">B</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;b&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 方法一</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> { </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> A, </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> B };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 方法二</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> { A, B };</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">A</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">B</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">b</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 方法一</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">A</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">B</span><span style="color:#393A34;"> </span><span style="color:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 方法二</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">A</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">B</span><span style="color:#393A34;"> </span><span style="color:#999999;">};</span></span></code></pre></div><h2 id="import-type-和-import-的区别" tabindex="-1">import type 和 import 的区别 <a class="header-anchor" href="#import-type-和-import-的区别" aria-label="Permalink to &quot;import type 和 import 的区别&quot;">​</a></h2><p><code>import type</code>是 <code>TypeScript</code> 中特有的语法，它允许你导入类型而不导入运行时的值。这通常用于导入类型定义，例如接口、类型别名或类类型。<strong>这种导入方式不会影响生成的 JavaScript 代码，因为类型信息在编译时会被移除</strong>。</p><ul><li><p>使用 <code>import type</code> 的一个主要优点是它可以避免循环依赖和副作用。</p></li><li><p><code>import</code> 用于导入值，这会影响生成的 JavaScript 代码。</p></li></ul><h2 id="importsnotusedasvalues-编译设置" tabindex="-1">importsNotUsedAsValues 编译设置 <a class="header-anchor" href="#importsnotusedasvalues-编译设置" aria-label="Permalink to &quot;importsNotUsedAsValues 编译设置&quot;">​</a></h2><p><code>TypeScript</code> 特有的输入类型（type）的 <code>import</code> 语句，编译成 <code>JavaScript</code> 时怎么处理呢？</p><p><code>TypeScript</code> 提供了 <code>importsNotUsedAsValues</code> 编译设置项，有三个可能的值。</p><ol><li><code>remove</code>：这是默认值，自动删除输入类型的 <code>import</code> 语句。</li><li><code>preserve</code>：保留输入类型的 <code>import</code> 语句。</li><li><code>error</code>：保留输入类型的 <code>import</code> 语句（与 <code>preserve</code> 相同），但是必须写成 <code>import type</code> 的形式，否则报错。</li></ol><p>假设在 ts 文件中有如下语句：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { TypeA } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./a&#39;</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">TypeA</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span></code></pre></div><ul><li><p><code>remove</code> 的编译结果会将该语句删掉。</p></li><li><p><code>preserve</code> 的编译结果会保留该语句，但会删掉其中涉及类型的部分。编译后的 js 文件结果为：</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./a&#39;</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span></code></pre></div><p>可以看到编译后的 <code>import</code> 语句不从 <code>a.js</code> 输入任何接口（包括类型），但是<strong>会引发 a.js 的执行，因此会保留 a.js 里面的副作用</strong>。</p><ul><li><code>error</code> 的编译结果与 <code>preserve</code> 相同，但在编译过程中会报错，因为它要求输入类型的 <code>import</code> 语句必须写成 <code>import type</code> 的形式。原始语句改成下面的形式，就不会报错。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> { TypeA } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./a&#39;</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">TypeA</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span></code></pre></div>`,44),e=[o];function t(c,r,y,i,A,d){return a(),p("div",null,e)}const F=s(l,[["render",t]]);export{D as __pageData,F as default};
