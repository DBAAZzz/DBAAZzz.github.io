import{_ as s,o as n,c as a,X as p}from"./chunks/framework.b5b468c2.js";const C=JSON.parse('{"title":"setup 函数揭秘","description":"","frontmatter":{"title":"setup 函数揭秘","author":"DBAAZzz","date":"2024/12/11 00：56","categories":["vue3"],"tags":["setup"]},"headers":[],"relativePath":"courses/从0开始学vue3/01-基础语法/01-setup方法的实现.md","filePath":"courses/从0开始学vue3/01-基础语法/01-setup方法的实现.md","lastUpdated":1745314351000}'),l={name:"courses/从0开始学vue3/01-基础语法/01-setup方法的实现.md"},o=p(`<h1 id="setup-函数揭秘" tabindex="-1">setup 函数揭秘 <a class="header-anchor" href="#setup-函数揭秘" aria-label="Permalink to &quot;setup 函数揭秘&quot;">​</a></h1><p>我们知道 vue3 的 <code>Composition API</code> 系列里，推出了一个全新的 <code>setup</code> 函数。接下来我们将对 <code>setup</code> 函数做分析。</p><h2 id="setup-函数在组件生命周期中的定位" tabindex="-1">setup 函数在组件生命周期中的定位 <a class="header-anchor" href="#setup-函数在组件生命周期中的定位" aria-label="Permalink to &quot;setup 函数在组件生命周期中的定位&quot;">​</a></h2><p>在使用 <code>setup</code> 函数的作用域里不能使用 <code>this</code> 来获取 <code>Vue</code> 实例，也就是无法和 Vue2 一样通过 <code>this.number</code>、<code>this.getInfo()</code> 来获取实例上的数据或执行实例上的方法。</p><p>下面将分析 <code>setup</code> 函数的执行时机和位置：</p><p><code>setup</code> 函数的具体执行顺序为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">mount -&gt; render -&gt; patch -&gt; processComponent</span></span>
<span class="line"><span style="color:#adbac7;">-&gt; mountComponent -&gt; setupComponent -&gt; setupStatefulComponent</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;">mount -&gt; render -&gt; patch -&gt; processComponent</span></span>
<span class="line"><span style="color:#393a34;">-&gt; mountComponent -&gt; setupComponent -&gt; setupStatefulComponent</span></span></code></pre></div><p><code>setupStatefulComponent</code> 源码如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setupStatefulComponent</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">isSSR</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Component</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> instance.type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 1. create public instance / render proxy</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 创建 ctx 的 proxy 代理，用于this的取值</span></span>
<span class="line"><span style="color:#ADBAC7;">  instance.proxy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Proxy</span><span style="color:#ADBAC7;">(instance.ctx, PublicInstanceProxyHandlers)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">setup</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Component</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (setup) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">setupResult</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">callWithErrorHandling</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      setup,</span></span>
<span class="line"><span style="color:#ADBAC7;">      instance,</span></span>
<span class="line"><span style="color:#ADBAC7;">      ErrorCodes.</span><span style="color:#6CB6FF;">SETUP_FUNCTION</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">      [__DEV__ </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">shallowReadonly</span><span style="color:#ADBAC7;">(instance.props) </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> instance.props, setupContext]</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">setupStatefulComponent</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">isSSR</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span></span>
<span class="line"><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">Component</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 1. create public instance / render proxy</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 创建 ctx 的 proxy 代理，用于this的取值</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">proxy</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Proxy</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PublicInstanceProxyHandlers</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">setup</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Component</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">setup</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">setupResult</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">callWithErrorHandling</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">setup</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">ErrorCodes</span><span style="color:#999999;">.</span><span style="color:#B07D48;">SETUP_FUNCTION</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#999999;">[</span><span style="color:#B07D48;">__DEV__</span><span style="color:#AB5959;"> ? </span><span style="color:#59873A;">shallowReadonly</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">props</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> : </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">props</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">setupContext</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><code>callWithErrorHandling</code> 源码为：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">callWithErrorHandling</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">fn</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Function</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">undefined</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">type</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ErrorTypes</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">args</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">[]</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> args </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">fn</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">...</span><span style="color:#ADBAC7;">args) </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">fn</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">  } </span><span style="color:#F47067;">catch</span><span style="color:#ADBAC7;"> (err) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">handleError</span><span style="color:#ADBAC7;">(err, instance, type)</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">callWithErrorHandling</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">fn</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Function</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">undefined</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">type</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ErrorTypes</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">args</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">[]</span></span>
<span class="line"><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">any</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">args</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fn</span><span style="color:#999999;">(...</span><span style="color:#B07D48;">args</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fn</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">catch</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">handleError</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">type</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>由上面的源码我们能看出 <code>callWithErrorHandling</code> 方法执行了 <code>setup</code> 函数，具体代码为<code>args ? fn(...args) : fn()</code>。</p><p>在调用 <code>setup</code> 时 <code>this</code> 并没有被显式绑定，在严格模式下（JavaScript ES6 默认严格模式或 setup 运行环境是模块化代码），未绑定 <code>this</code> 的函数会使 <code>this</code> 变为 <code>undefined</code>。</p><p><strong>因此，setup 内部访问 this 并不会指向组件实例。</strong></p><h2 id="setup-函数为什么能通过-getcurrentinstance-访问当前实例" tabindex="-1">setup 函数为什么能通过 getCurrentInstance 访问当前实例 <a class="header-anchor" href="#setup-函数为什么能通过-getcurrentinstance-访问当前实例" aria-label="Permalink to &quot;setup 函数为什么能通过 getCurrentInstance 访问当前实例&quot;">​</a></h2><p><code>instance</code> 实例初始化会在 <code>setup</code> 函数执行前，所以在 <code>setup</code> 函数里能访问到 <code>instance</code>。</p><p><code>getCurrentInstance</code> 方法的源码实现：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getCurrentInstance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  currentInstance </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> currentRenderingInstance</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> const </span><span style="color:#59873A;">getCurrentInstance</span><span style="color:#999999;">: () =&gt; </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">currentInstance</span><span style="color:#AB5959;"> || </span><span style="color:#B07D48;">currentRenderingInstance</span></span></code></pre></div><p><code>getCurrentInstance</code> 返回当前模块的 <code>currentInstance</code> 或 <code>currentRenderingInstance</code> 变量，初始值为 <code>undefined</code>。</p><p><code>currentInstance</code> 是什么时候被赋值的呢？答案是在 <code>setupStatefulComponent</code> 函数。</p><p><code>setupStatefulComponent</code> 源码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setupStatefulComponent</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">isSSR</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  instance.proxy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Proxy</span><span style="color:#ADBAC7;">(instance.ctx, PublicInstanceProxyHandlers)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">setup</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Component</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (setup) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 将当前实例赋值给 currentInstance</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 必须要在调用 setup 之前，否则通过在 setup函数里调用 getCurrentInstance 方法会获取不到当前实例</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">reset</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setCurrentInstance</span><span style="color:#ADBAC7;">(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行 setup 函数并获取 setup 的返回值</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">setupResult</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">callWithErrorHandling</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">      setup,</span></span>
<span class="line"><span style="color:#ADBAC7;">      instance,</span></span>
<span class="line"><span style="color:#ADBAC7;">      ErrorCodes.</span><span style="color:#6CB6FF;">SETUP_FUNCTION</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">      [__DEV__ </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">shallowReadonly</span><span style="color:#ADBAC7;">(instance.props) </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> instance.props, setupContext]</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">resetTracking</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 取消赋值</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">reset</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 处理 setup 函数的返回值，实现自动浅层解包</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">handleSetupResult</span><span style="color:#ADBAC7;">(instance, setupResult, isSSR)</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">setupStatefulComponent</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">isSSR</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span></span>
<span class="line"><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">proxy</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Proxy</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PublicInstanceProxyHandlers</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">setup</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">Component</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">setup</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 将当前实例赋值给 currentInstance</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 必须要在调用 setup 之前，否则通过在 setup函数里调用 getCurrentInstance 方法会获取不到当前实例</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">reset</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">setCurrentInstance</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 执行 setup 函数并获取 setup 的返回值</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">setupResult</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">callWithErrorHandling</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">setup</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">ErrorCodes</span><span style="color:#999999;">.</span><span style="color:#B07D48;">SETUP_FUNCTION</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#999999;">[</span><span style="color:#B07D48;">__DEV__</span><span style="color:#AB5959;"> ? </span><span style="color:#59873A;">shallowReadonly</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">props</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> : </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">props</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">setupContext</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">resetTracking</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 取消赋值</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">reset</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 处理 setup 函数的返回值，实现自动浅层解包</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">handleSetupResult</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">setupResult</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isSSR</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><code>setCurrentInstance</code> 函数源码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setCurrentInstance</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">prev</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> currentInstance</span></span>
<span class="line"><span style="color:#ADBAC7;">  currentInstance </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> instance</span></span>
<span class="line"><span style="color:#ADBAC7;">  instance.scope.</span><span style="color:#DCBDFB;">on</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ()</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    currentInstance </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pre</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> const </span><span style="color:#59873A;">setCurrentInstance</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  const </span><span style="color:#B07D48;">prev</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">currentInstance</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">currentInstance</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">instance</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">scope</span><span style="color:#999999;">.</span><span style="color:#59873A;">on</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#1E754F;">return</span><span style="color:#AB5959;"> </span><span style="color:#999999;">():</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">void</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">currentInstance</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">pre</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><code>setup</code> 函数被执行时将当前实例赋值给 <code>currentInstance</code>，执行成功后又将 <code>currentInstance</code> 重置回 <code>currentInstance</code> 上次的值（null）。</p><p>所以这导致了 <code>setup</code> 函数里的异步操作中用 <code>getCurrentInstance()</code> 方法是获取不到当前实例的。</p><p>解决办法是 <code>setup</code> 方法被执行时将当前 <code>getCurrentInstance()</code> 的值保存下来。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">script setup lang</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;ts&#39;</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {getCurrentInstance} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span><span style="color:#ADBAC7;"> const instance = getCurrentInstance()</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">clickEvent</span><span style="color:#ADBAC7;">() {console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;当前实例：&#39;</span><span style="color:#ADBAC7;">, instance)}</span></span>
<span class="line"><span style="color:#F47067;">&lt;/</span><span style="color:#ADBAC7;">script</span><span style="color:#F47067;">&gt;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#B07D48;">script</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">setup</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">lang</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">ts</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#B07D48;">getCurrentInstance</span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">instance</span><span style="color:#393A34;"> = </span><span style="color:#B07D48;">getCurrentInstance</span><span style="color:#393A34;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">clickEvent</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">当前实例：</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">)}</span></span>
<span class="line"><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">/</span><span style="color:#B07D48;">script</span><span style="color:#999999;">&gt;</span></span></code></pre></div><h2 id="setup-函数是如何实现自动浅层解包" tabindex="-1">setup 函数是如何实现自动浅层解包 <a class="header-anchor" href="#setup-函数是如何实现自动浅层解包" aria-label="Permalink to &quot;setup 函数是如何实现自动浅层解包&quot;">​</a></h2><p>以下是官方描述：</p><hr><p>在模板中访问从 <code>setup</code> 返回的 <strong>ref</strong> 时，它会<strong>自动浅层解包</strong>，因此你无须再在模板中为它写 <code>.value</code>。当通过 <code>this</code> 访问时也会同样如此解包。</p><p><code>setup()</code> 自身并不含对组件实例的访问权，即在 <code>setup()</code> 中访问 <code>this</code> 会是 <code>undefined</code>。你可以在选项式 API 中访问组合式 API 暴露的值，但反过来则不行。</p><p><code>setup()</code> 应该同步地返回一个对象。唯一可以使用 <code>async setup()</code> 的情况是，该组件是 <code>Suspense</code> 组件的后裔。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">script</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { ref } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">default</span><span style="color:#F69D50;"> {</span></span>
<span class="line"><span style="color:#F69D50;">  </span><span style="color:#DCBDFB;">setup</span><span style="color:#F69D50;">() </span><span style="color:#ADBAC7;">{</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">count</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ref</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 返回值会暴露给模板和其他的选项式 API 钩子</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      count</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span><span style="color:#F69D50;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F69D50;">  </span><span style="color:#DCBDFB;">mounted</span><span style="color:#F69D50;">() </span><span style="color:#ADBAC7;">{</span></span>
<span class="line"><span style="color:#ADBAC7;">    console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.count) </span><span style="color:#768390;">// 0</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#F69D50;">}</span></span>
<span class="line"><span style="color:#F47067;">&lt;/</span><span style="color:#ADBAC7;">script</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">template</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">button @click</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;count++&quot;</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">{{ count }}</span><span style="color:#F47067;">&lt;/</span><span style="color:#ADBAC7;">button</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#F47067;">&lt;/</span><span style="color:#ADBAC7;">template</span><span style="color:#F47067;">&gt;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">script</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ref</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">setup</span><span style="color:#999999;">() {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">count</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 返回值会暴露给模板和其他的选项式 API 钩子</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">count</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">mounted</span><span style="color:#999999;">() {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">count</span><span style="color:#999999;">) </span><span style="color:#A0ADA0;">// 0</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">/</span><span style="color:#B07D48;">script</span><span style="color:#999999;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">template</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">&lt;</span><span style="color:#B07D48;">button</span><span style="color:#393A34;"> </span><span style="color:#999999;">@</span><span style="color:#B07D48;">click</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">count++</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">&gt;{{ </span><span style="color:#B07D48;">count</span><span style="color:#999999;"> }}&lt;</span><span style="color:#AB5959;">/</span><span style="color:#B07D48;">button</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">/</span><span style="color:#B07D48;">template</span><span style="color:#999999;">&gt;</span></span></code></pre></div><hr><p>那么 <code>setup</code> 函数是如何实现 ref 解包的？我们截取 vue 源码来看看是如何实现的。</p><p>通过上文我们知道 <code>setup</code> 函数会被 <code>callWithErrorHandling</code> 函数执行并得到 setup 的返回值 <code>setupResult</code>。</p><p>而 <code>setupResult</code> 会被 <code>handleSetupResult(instance, setupResult, isSSR)</code> 进行处理。</p><p><code>handleSetupResult</code> 源码定义为：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 挂载组件时处理 setup 的返回值</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">handleSetupResult</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">setupResult</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// proxyRefs 的作用就是把 setupResult 对象做一层代理</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 方便用户直接访问 ref 类型的值</span></span>
<span class="line"><span style="color:#ADBAC7;">  instance.setupState </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">proxyRefs</span><span style="color:#ADBAC7;">(setupResult)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">proxyRefs</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">object</span><span style="color:#ADBAC7;">&gt;(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">objectWithRefs</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ShallowUnwrapRef</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 如果是 reactive 就不做处理</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isReactive</span><span style="color:#ADBAC7;">(objectWithRefs)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> objectWithRefs</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Proxy</span><span style="color:#ADBAC7;">(objectWithRefs, shallowUnwrapHandlers) </span><span style="color:#768390;">// proxy 代理</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">shallowUnwrapHandlers</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ProxyHandler</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">: (</span><span style="color:#F69D50;">target</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">receiver</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    key </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> ReactiveFlags.</span><span style="color:#6CB6FF;">RAW</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> target</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">unref</span><span style="color:#ADBAC7;">(Reflect.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(target, key, receiver)),</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">: (</span><span style="color:#F69D50;">target</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">value</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">receiver</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">oldValue</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> target[key]</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(oldValue) </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(value)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      oldValue.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> value</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> Reflect.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(target, key, value, receiver)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 挂载组件时处理 setup 的返回值</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">handleSetupResult</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">setupResult</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">void</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// proxyRefs 的作用就是把 setupResult 对象做一层代理</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 方便用户直接访问 ref 类型的值</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">setupState</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">proxyRefs</span><span style="color:#999999;">(</span><span style="color:#B07D48;">setupResult</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">proxyRefs</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">object</span><span style="color:#999999;">&gt;(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">objectWithRefs</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">T</span></span>
<span class="line"><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ShallowUnwrapRef</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果是 reactive 就不做处理</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isReactive</span><span style="color:#999999;">(</span><span style="color:#B07D48;">objectWithRefs</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objectWithRefs</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Proxy</span><span style="color:#999999;">(</span><span style="color:#B07D48;">objectWithRefs</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">shallowUnwrapHandlers</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// proxy 代理</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">shallowUnwrapHandlers</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ProxyHandler</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt; =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">get</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">, </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">) =&gt;</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">key</span><span style="color:#999999;"> </span><span style="color:#AB5959;">===</span><span style="color:#999999;"> </span><span style="color:#B07D48;">ReactiveFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">RAW</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#AB5959;">?</span><span style="color:#999999;"> </span><span style="color:#B07D48;">target</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#AB5959;">:</span><span style="color:#999999;"> </span><span style="color:#59873A;">unref</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">, </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">)),</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">set</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">, </span><span style="color:#B07D48;">value</span><span style="color:#999999;">, </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">) =&gt; {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">oldValue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#1E754F;">if</span><span style="color:#999999;"> (</span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">) </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#999999;"> </span><span style="color:#AB5959;">!</span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)) {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">oldValue</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#999999;"> = </span><span style="color:#B07D48;">value</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#999999;">    } </span><span style="color:#1E754F;">else</span><span style="color:#999999;"> {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> </span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">, </span><span style="color:#B07D48;">value</span><span style="color:#999999;">, </span><span style="color:#B07D48;">receiver</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>通过上面的源码我们能清楚的知道自动解包的原理是用了 <code>proxy</code> 进行了代理，当我们访问 setup 函数的返回对象时，通过 get 函数统一拦截，直接访问到 <code>unref</code> 解包后的结果。</p><p>而在 set 函数中有 <code>oldValue.value = value</code> 和 <code>Reflect.set(target, key, value, receiver)</code> 两种处理的区分在于 Reflect.set 会丢失响应式。举例说明：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reactive</span><span style="color:#ADBAC7;">({ count: </span><span style="color:#DCBDFB;">ref</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 错误赋值</span></span>
<span class="line"><span style="color:#ADBAC7;">state.count </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">state</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">reactive</span><span style="color:#999999;">({ </span><span style="color:#998418;">count</span><span style="color:#999999;">: </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#2F798A;">0</span><span style="color:#999999;">) })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 错误赋值</span></span>
<span class="line"><span style="color:#B07D48;">state</span><span style="color:#999999;">.</span><span style="color:#B07D48;">count</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">10</span></span></code></pre></div><p>如果不特殊处理，这只是替换了 count 这个 ref，导致原来的响应式丢失</p><h2 id="为什么在-vue2-options-中能通过-this-ref-定义的变量-访问到-setup-函数定义的变量" tabindex="-1">为什么在 vue2 options 中能通过 this.[ref 定义的变量]访问到 setup 函数定义的变量 <a class="header-anchor" href="#为什么在-vue2-options-中能通过-this-ref-定义的变量-访问到-setup-函数定义的变量" aria-label="Permalink to &quot;为什么在 vue2 options 中能通过 this.[ref 定义的变量]访问到 setup 函数定义的变量&quot;">​</a></h2><p><code>setupStatefulComponent</code> 函数最后会执行 <code>finishComponentSetup</code> 函数</p><p><code>finishComponentSetup</code> 源码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">finishComponentSetup</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">isSSR</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">skipOptions</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">//...忽略代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// support for 2.x options</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (__FEATURE_OPTIONS_API__ </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">(__COMPAT__ </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> skipOptions)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">reset</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setCurrentInstance</span><span style="color:#ADBAC7;">(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">pauseTracking</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">applyOptions</span><span style="color:#ADBAC7;">(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">    } </span><span style="color:#F47067;">finally</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">resetTracking</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">reset</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">finishComponentSetup</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">isSSR</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">skipOptions</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span></span>
<span class="line"><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">//...忽略代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// support for 2.x options</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">__FEATURE_OPTIONS_API__</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!</span><span style="color:#999999;">(</span><span style="color:#B07D48;">__COMPAT__</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">skipOptions</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">reset</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">setCurrentInstance</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">pauseTracking</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">applyOptions</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">finally</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">resetTracking</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">reset</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><code>applyOptions</code> 源码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">applyOptions</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">options</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">resolveMergedOptions</span><span style="color:#ADBAC7;">(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">publicThis</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> instance.proxy</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ctx</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> instance.ctx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// call beforeCreate first before accessing other options since</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// the hook may mutate resolved options (#2791)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (options.beforeCreate) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">callHook</span><span style="color:#ADBAC7;">(options.beforeCreate, instance, LifecycleHooks.</span><span style="color:#6CB6FF;">BEFORE_CREATE</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// state</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">dataOptions</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">computed</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">computedOptions</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">methods</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">watch</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">watchOptions</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">provide</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">provideOptions</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">inject</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">injectOptions</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// lifecycle</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">created</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">beforeMount</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">mounted</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">beforeUpdate</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">updated</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">activated</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">deactivated</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">beforeDestroy</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">beforeUnmount</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">destroyed</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">unmounted</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">render</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">renderTracked</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">renderTriggered</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">errorCaptured</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">serverPrefetch</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// public API</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">expose</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">inheritAttrs</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// assets</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">components</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">directives</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">filters</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (methods) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">key</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> methods) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">methodHandler</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (methods </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MethodOptions</span><span style="color:#ADBAC7;">)[key]</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#DCBDFB;">isFunction</span><span style="color:#ADBAC7;">(methodHandler)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        ctx[key] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> methodHandler.</span><span style="color:#DCBDFB;">bind</span><span style="color:#ADBAC7;">(publicThis)</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (dataOptions) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    instance.data </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reactive</span><span style="color:#ADBAC7;">(data)</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (computedOptions) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">key</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> computedOptions) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">opt</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (computedOptions </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComputedOptions</span><span style="color:#ADBAC7;">)[key]</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">get</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isFunction</span><span style="color:#ADBAC7;">(opt)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> opt.</span><span style="color:#DCBDFB;">bind</span><span style="color:#ADBAC7;">(publicThis, publicThis)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isFunction</span><span style="color:#ADBAC7;">(opt.get)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> opt.get.</span><span style="color:#DCBDFB;">bind</span><span style="color:#ADBAC7;">(publicThis, publicThis)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NOOP</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">set</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">!</span><span style="color:#DCBDFB;">isFunction</span><span style="color:#ADBAC7;">(opt) </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isFunction</span><span style="color:#ADBAC7;">(opt.set)</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> opt.set.</span><span style="color:#DCBDFB;">bind</span><span style="color:#ADBAC7;">(publicThis)</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NOOP</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">c</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">computed</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">        get,</span></span>
<span class="line"><span style="color:#ADBAC7;">        set,</span></span>
<span class="line"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"><span style="color:#ADBAC7;">      Object.</span><span style="color:#DCBDFB;">defineProperty</span><span style="color:#ADBAC7;">(ctx, key, {</span></span>
<span class="line"><span style="color:#ADBAC7;">        enumerable: </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        configurable: </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">: () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> c.value,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">: (</span><span style="color:#F69D50;">v</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (c.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> v),</span></span>
<span class="line"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (provideOptions) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">provides</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isFunction</span><span style="color:#ADBAC7;">(provideOptions)</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> provideOptions.</span><span style="color:#DCBDFB;">call</span><span style="color:#ADBAC7;">(publicThis)</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> provideOptions</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 对optionsAPI的生命周期做处理，主要是执行生命周期函数时通过bind方法将publicThis传入</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onBeforeMount, beforeMount)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onMounted, mounted)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onBeforeUpdate, beforeUpdate)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onUpdated, updated)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onActivated, activated)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onDeactivated, deactivated)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onErrorCaptured, errorCaptured)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onRenderTracked, renderTracked)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onRenderTriggered, renderTriggered)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onBeforeUnmount, beforeUnmount)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onUnmounted, unmounted)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">registerLifecycleHook</span><span style="color:#ADBAC7;">(onServerPrefetch, serverPrefetch)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">applyOptions</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">void</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">options</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">resolveMergedOptions</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">publicThis</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">proxy</span><span style="color:#AB5959;">! </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">any</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">ctx</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">ctx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// call beforeCreate first before accessing other options since</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// the hook may mutate resolved options (#2791)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">options</span><span style="color:#999999;">.</span><span style="color:#B07D48;">beforeCreate</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">callHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">options</span><span style="color:#999999;">.</span><span style="color:#B07D48;">beforeCreate</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">LifecycleHooks</span><span style="color:#999999;">.</span><span style="color:#B07D48;">BEFORE_CREATE</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// state</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">data</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">dataOptions</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">computed</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">computedOptions</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">methods</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">watch</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">watchOptions</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">provide</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">provideOptions</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">inject</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">injectOptions</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// lifecycle</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">created</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">beforeMount</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">mounted</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">beforeUpdate</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">updated</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">activated</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">deactivated</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">beforeDestroy</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">beforeUnmount</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">destroyed</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">unmounted</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">render</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">renderTracked</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">renderTriggered</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">errorCaptured</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">serverPrefetch</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// public API</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">expose</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">inheritAttrs</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// assets</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">components</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">directives</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">filters</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">methods</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">key</span><span style="color:#AB5959;"> in</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">methods</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">methodHandler</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">methods</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">MethodOptions</span><span style="color:#999999;">)[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#59873A;">isFunction</span><span style="color:#999999;">(</span><span style="color:#B07D48;">methodHandler</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">methodHandler</span><span style="color:#999999;">.</span><span style="color:#59873A;">bind</span><span style="color:#999999;">(</span><span style="color:#B07D48;">publicThis</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">dataOptions</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">data</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reactive</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">computedOptions</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">key</span><span style="color:#AB5959;"> in</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">computedOptions</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">opt</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">computedOptions</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> </span><span style="color:#2E8F82;">ComputedOptions</span><span style="color:#999999;">)[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">get</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">isFunction</span><span style="color:#999999;">(</span><span style="color:#B07D48;">opt</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">opt</span><span style="color:#999999;">.</span><span style="color:#59873A;">bind</span><span style="color:#999999;">(</span><span style="color:#B07D48;">publicThis</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">publicThis</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">isFunction</span><span style="color:#999999;">(</span><span style="color:#B07D48;">opt</span><span style="color:#999999;">.</span><span style="color:#B07D48;">get</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">opt</span><span style="color:#999999;">.</span><span style="color:#B07D48;">get</span><span style="color:#999999;">.</span><span style="color:#59873A;">bind</span><span style="color:#999999;">(</span><span style="color:#B07D48;">publicThis</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">publicThis</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">NOOP</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">set</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span></span>
<span class="line"><span style="color:#AB5959;">        !</span><span style="color:#59873A;">isFunction</span><span style="color:#999999;">(</span><span style="color:#B07D48;">opt</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> &amp;&amp; </span><span style="color:#59873A;">isFunction</span><span style="color:#999999;">(</span><span style="color:#B07D48;">opt</span><span style="color:#999999;">.</span><span style="color:#B07D48;">set</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">opt</span><span style="color:#999999;">.</span><span style="color:#B07D48;">set</span><span style="color:#999999;">.</span><span style="color:#59873A;">bind</span><span style="color:#999999;">(</span><span style="color:#B07D48;">publicThis</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">NOOP</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">c</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">computed</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#B07D48;">get</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#B07D48;">set</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      })</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">defineProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#998418;">enumerable</span><span style="color:#999999;">: </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#998418;">configurable</span><span style="color:#999999;">: </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#59873A;">get</span><span style="color:#999999;">: () =&gt; </span><span style="color:#B07D48;">c</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#59873A;">set</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">v</span><span style="color:#999999;">) =&gt; (</span><span style="color:#B07D48;">c</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#999999;"> = </span><span style="color:#B07D48;">v</span><span style="color:#999999;">),</span></span>
<span class="line"><span style="color:#999999;">      })</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">provideOptions</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">provides</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">isFunction</span><span style="color:#999999;">(</span><span style="color:#B07D48;">provideOptions</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">provideOptions</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#B07D48;">publicThis</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">provideOptions</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 对optionsAPI的生命周期做处理，主要是执行生命周期函数时通过bind方法将publicThis传入</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onBeforeMount</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">beforeMount</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onMounted</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">mounted</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onBeforeUpdate</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">beforeUpdate</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onUpdated</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">updated</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onActivated</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">activated</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onDeactivated</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">deactivated</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onErrorCaptured</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">errorCaptured</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onRenderTracked</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">renderTracked</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onRenderTriggered</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">renderTriggered</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onBeforeUnmount</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">beforeUnmount</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onUnmounted</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">unmounted</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">registerLifecycleHook</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onServerPrefetch</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">serverPrefetch</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><code>applyOptions</code> 函数的作用是兼容 vue2 的 options 写法，通过 bind 方法将 <code>methods</code> 和 <strong>生命周期函数</strong> 的 <code>this</code> 显式绑定为 <code>publicThis</code>（即 <code>instance.proxy</code>），从而允许它们访问组件实例上下文（<code>instance.ctx</code>）上的属性</p><h2 id="暴露公共属性是如何实现的" tabindex="-1">暴露公共属性是如何实现的 <a class="header-anchor" href="#暴露公共属性是如何实现的" aria-label="Permalink to &quot;暴露公共属性是如何实现的&quot;">​</a></h2><p>官网描述：</p><p><code>expose</code> 函数用于显式地限制该组件暴露出的属性，当父组件通过<strong>模板引用</strong>访问该组件的实例时，将仅能访问 <code>expose</code> 函数暴露出的内容：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">default</span><span style="color:#F69D50;"> {</span></span>
<span class="line"><span style="color:#F69D50;">  </span><span style="color:#DCBDFB;">setup</span><span style="color:#F69D50;">(props, { expose }) </span><span style="color:#ADBAC7;">{</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 让组件实例处于 “关闭状态”</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 即不向父组件暴露任何东西</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">expose</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">publicCount</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ref</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">privateCount</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ref</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 有选择地暴露局部状态</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">expose</span><span style="color:#ADBAC7;">({ count: publicCount })</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span><span style="color:#F69D50;">,</span></span>
<span class="line"><span style="color:#F69D50;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">setup</span><span style="color:#999999;">(</span><span style="color:#B07D48;">props</span><span style="color:#999999;">, { </span><span style="color:#B07D48;">expose</span><span style="color:#999999;"> }) {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 让组件实例处于 “关闭状态”</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 即不向父组件暴露任何东西</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#59873A;">expose</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">publicCount</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">privateCount</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 有选择地暴露局部状态</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#59873A;">expose</span><span style="color:#999999;">({ </span><span style="color:#998418;">count</span><span style="color:#999999;">: </span><span style="color:#B07D48;">publicCount</span><span style="color:#999999;"> })</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>源码实现为：</p><p>挂载渲染一个组件时会调用 <code>createSetupContext</code> 方法，将传入的 <code>exposed</code> 属性添加到 <code>instance.exposed</code> 。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createSetupContext</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">SetupContext</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">expose</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">SetupContext</span><span style="color:#ADBAC7;">[</span><span style="color:#96D0FF;">&#39;expose&#39;</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">exposed</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    instance.exposed </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> exposed </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> {}</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    attrs: </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Proxy</span><span style="color:#ADBAC7;">(instance.attrs, attrsProxyHandlers),</span></span>
<span class="line"><span style="color:#ADBAC7;">    slots: instance.slots,</span></span>
<span class="line"><span style="color:#ADBAC7;">    emit: instance.emit,</span></span>
<span class="line"><span style="color:#ADBAC7;">    expose,</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createSetupContext</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span></span>
<span class="line"><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">SetupContext</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#59873A;">expose</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">SetupContext</span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">expose</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">] =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">exposed</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">exposed</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">exposed</span><span style="color:#AB5959;"> ||</span><span style="color:#999999;"> {}</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">attrs</span><span style="color:#999999;">: </span><span style="color:#AB5959;">new</span><span style="color:#999999;"> </span><span style="color:#59873A;">Proxy</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">attrs</span><span style="color:#999999;">, </span><span style="color:#B07D48;">attrsProxyHandlers</span><span style="color:#999999;">),</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">slots</span><span style="color:#999999;">: </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">slots</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">emit</span><span style="color:#999999;">: </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">emit</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">expose</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><code>vue</code> 获取组件时实例时是通过 <code>getComponentPublicInstance</code> 方法，该方法只返回 <code>instance</code> 上的 <code>exposed</code> 属性</p><p><code>getComponentPublicInstance</code> 方法会在以下场景下被调用：</p><ul><li><code>renderTemplateRefs</code> 文件的 <code>setRef</code> 方法中被调用</li><li>执行 <code>mount</code> 函数时调用并将结果值返回</li></ul><p><code>getComponentPublicInstance</code>源码如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getComponentPublicInstance</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">instance</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentPublicInstance</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;">[</span><span style="color:#96D0FF;">&#39;exposed&#39;</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (instance.exposed) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> (</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 缓存</span></span>
<span class="line"><span style="color:#ADBAC7;">      instance.exposeProxy </span><span style="color:#F47067;">||</span></span>
<span class="line"><span style="color:#ADBAC7;">      (instance.exposeProxy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Proxy</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">proxyRefs</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">markRaw</span><span style="color:#ADBAC7;">(instance.exposed)), {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (key </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> target) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> target[key]</span></span>
<span class="line"><span style="color:#ADBAC7;">          } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (key </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> publicPropertiesMap) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> publicPropertiesMap[key](instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">          }</span></span>
<span class="line"><span style="color:#ADBAC7;">        },</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">has</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">target</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">key</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> key </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> target </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> key </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> publicPropertiesMap</span></span>
<span class="line"><span style="color:#ADBAC7;">        },</span></span>
<span class="line"><span style="color:#ADBAC7;">      }))</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">  } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> instance.proxy</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">getComponentPublicInstance</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span></span>
<span class="line"><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ComponentPublicInstance</span><span style="color:#393A34;"> </span><span style="color:#999999;">|</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">exposed</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">|</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">exposed</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// 缓存</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">exposeProxy</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">exposeProxy</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Proxy</span><span style="color:#999999;">(</span><span style="color:#59873A;">proxyRefs</span><span style="color:#999999;">(</span><span style="color:#59873A;">markRaw</span><span style="color:#999999;">(</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">exposed</span><span style="color:#999999;">)),</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">          </span><span style="color:#1E754F;">if</span><span style="color:#999999;"> (</span><span style="color:#B07D48;">key</span><span style="color:#999999;"> </span><span style="color:#AB5959;">in</span><span style="color:#999999;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">          } </span><span style="color:#1E754F;">else</span><span style="color:#999999;"> </span><span style="color:#1E754F;">if</span><span style="color:#999999;"> (</span><span style="color:#B07D48;">key</span><span style="color:#999999;"> </span><span style="color:#AB5959;">in</span><span style="color:#999999;"> </span><span style="color:#B07D48;">publicPropertiesMap</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> </span><span style="color:#B07D48;">publicPropertiesMap</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">](</span><span style="color:#B07D48;">instance</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">          }</span></span>
<span class="line"><span style="color:#999999;">        },</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#59873A;">has</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">, </span><span style="color:#B07D48;">key</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">          </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;"> </span><span style="color:#AB5959;">in</span><span style="color:#999999;"> </span><span style="color:#B07D48;">target</span><span style="color:#999999;"> </span><span style="color:#AB5959;">||</span><span style="color:#999999;"> </span><span style="color:#B07D48;">key</span><span style="color:#999999;"> </span><span style="color:#AB5959;">in</span><span style="color:#999999;"> </span><span style="color:#B07D48;">publicPropertiesMap</span></span>
<span class="line"><span style="color:#999999;">        },</span></span>
<span class="line"><span style="color:#999999;">      }))</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">proxy</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setRef</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">rawRef</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VNodeNormalizedRef</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">oldRawRef</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VNodeNormalizedRef</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">parentSuspense</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">SuspenseBoundary</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">vnode</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VNode</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">isUnmount</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 如果是组件就获取 getComponentPublicInstance 的值，否则就获取 el 实例</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">refValue</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span></span>
<span class="line"><span style="color:#ADBAC7;">    vnode.shapeFlag </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;"> ShapeFlags.</span><span style="color:#6CB6FF;">STATEFUL_COMPONENT</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getComponentPublicInstance</span><span style="color:#ADBAC7;">(vnode.component</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> vnode.el</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">value</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> isUnmount </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> refValue</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// i 是当前组件实例，r 是传入组件的ref值</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#F69D50;">i</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">owner</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">r</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> rawRef</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// ... 省略一些过程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">_isRef</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isRef</span><span style="color:#ADBAC7;">(ref)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">doSet</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (_isRef) {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 就将 getComponentPublicInstance 方法获取到的值传入组件的 ref 上</span></span>
<span class="line"><span style="color:#ADBAC7;">      ref.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> value</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (value) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    ;(doSet </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">SchedulerJob</span><span style="color:#ADBAC7;">).id </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">queuePostRenderEffect</span><span style="color:#ADBAC7;">(doSet, parentSuspense)</span></span>
<span class="line"><span style="color:#ADBAC7;">  } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">doSet</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">setRef</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">rawRef</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">VNodeNormalizedRef</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">oldRawRef</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">VNodeNormalizedRef</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">parentSuspense</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">SuspenseBoundary</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">VNode</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">isUnmount</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span></span>
<span class="line"><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">void</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果是组件就获取 getComponentPublicInstance 的值，否则就获取 el 实例</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">refValue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">shapeFlag</span><span style="color:#AB5959;"> &amp; </span><span style="color:#B07D48;">ShapeFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">STATEFUL_COMPONENT</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#59873A;">getComponentPublicInstance</span><span style="color:#999999;">(</span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">component</span><span style="color:#AB5959;">!</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">el</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">value</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">isUnmount</span><span style="color:#AB5959;"> ? null : </span><span style="color:#B07D48;">refValue</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// i 是当前组件实例，r 是传入组件的ref值</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">i</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">owner</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">r</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">ref</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">rawRef</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ... 省略一些过程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">_isRef</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">isRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ref</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#59873A;">doSet</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#1E754F;">if</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">_isRef</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// 就将 getComponentPublicInstance 方法获取到的值传入组件的 ref 上</span></span>
<span class="line"><span style="color:#AB5959;">      </span><span style="color:#B07D48;">ref</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">value</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">;(</span><span style="color:#B07D48;">doSet</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">as</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">SchedulerJob</span><span style="color:#999999;">).</span><span style="color:#B07D48;">id</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">-</span><span style="color:#2F798A;">1</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">queuePostRenderEffect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">doSet</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">parentSuspense</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">doSet</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>我们能清楚的看到 <strong>setRef 函数会将 <code>getComponentPublicInstance</code> 的返回值赋值给组件的 ref 属性</strong>。</p><p>需要注意的是，<strong>更新操作是在 <code>queuePostRenderEffect</code> 方法里执行的，这是因为调用 <code>setRef</code> 函数时组件的 <code>instance</code> 以及各个属性都还没有更新或初始化，需要等组件完成渲染后才执行赋值操作，确保赋值给组件 <code>ref</code> 的值是正确的</strong></p><p><code>setRef</code> 函数的执行时机是：当页面 render 时会进行 patch 操作，在 patch 函数里对比新旧节点的差异进而更新，同时也会执行上面的 <code>setRef</code> 函数。源码如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">patch</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">n1</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VNode</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">, </span><span style="color:#768390;">// null means this is a mount</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">n2</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VNode</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">container</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">RendererElement</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">anchor</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">RendererNode</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">parentComponent</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComponentInternalInstance</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">parentSuspense</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">SuspenseBoundary</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">namespace</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ElementNamespace</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">slotScopeIds</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">[] </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">optimized</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span></span>
<span class="line"><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">n1</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">n2</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">container</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  anchor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  parentComponent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  parentSuspense </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  namespace </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">undefined</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  slotScopeIds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  optimized </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> __DEV__ </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> isHmrUpdating </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">n2.dynamicChildren</span></span>
<span class="line"><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">type</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">shapeFlag</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> n2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// set ref</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (ref </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> parentComponent) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">setRef</span><span style="color:#ADBAC7;">(ref, n1 </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> n1.ref, parentSuspense, n2 </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> n1, </span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">n2)</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#59873A;">patch</span><span style="color:#999999;">: (</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">n1</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">VNode</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">, </span><span style="color:#A0ADA0;">// null means this is a mount</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">n2</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">VNode</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">container</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">RendererElement</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">anchor</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">RendererNode</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">parentComponent</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ComponentInternalInstance</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">parentSuspense</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">SuspenseBoundary</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">namespace</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">ElementNamespace</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">slotScopeIds</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">[] | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B07D48;">optimized</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span></span>
<span class="line"><span style="color:#999999;">) =&gt; </span><span style="color:#2E8F82;">void</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">n1</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">n2</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">container</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">anchor</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">parentComponent</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">parentSuspense</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">namespace</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> undefined</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">slotScopeIds</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">optimized</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">__DEV__</span><span style="color:#AB5959;"> &amp;&amp; </span><span style="color:#B07D48;">isHmrUpdating</span><span style="color:#AB5959;"> ? </span><span style="color:#1E754F;">false</span><span style="color:#AB5959;"> : !!</span><span style="color:#B07D48;">n2</span><span style="color:#999999;">.</span><span style="color:#B07D48;">dynamicChildren</span></span>
<span class="line"><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">type</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">ref</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">shapeFlag</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">n2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// set ref</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#1E754F;">if</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">ref</span><span style="color:#AB5959;"> != null &amp;&amp; </span><span style="color:#B07D48;">parentComponent</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#59873A;">setRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ref</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">n1</span><span style="color:#AB5959;"> &amp;&amp; </span><span style="color:#B07D48;">n1</span><span style="color:#999999;">.</span><span style="color:#B07D48;">ref</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">parentSuspense</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">n2</span><span style="color:#AB5959;"> || </span><span style="color:#B07D48;">n1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> !</span><span style="color:#B07D48;">n2</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>而从下面源码中能看出 vnode 的 ref 属性的值来源于 props 上的 ref 变量。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createVNode</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createBaseVNode</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">...</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createBaseVNode</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">type</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VNodeTypes</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ClassComponent</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL_DYNAMIC_COMPONENT</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">props</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">Data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VNodeProps</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">children</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">patchFlag</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">dynamicProps</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">[] </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">shapeFlag</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> type </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> Fragment </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> ShapeFlags.</span><span style="color:#6CB6FF;">ELEMENT</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">isBlockNode</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">needFullChildrenNormalization</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">VNode</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">vnode</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">    ref: props </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">normalizeRef</span><span style="color:#ADBAC7;">(props),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">  };</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createVNode</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createBaseVNode</span><span style="color:#999999;">(...)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createBaseVNode</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">type</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">VNodeTypes</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">ClassComponent</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">typeof</span><span style="color:#999999;"> </span><span style="color:#B07D48;">NULL_DYNAMIC_COMPONENT</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">props</span><span style="color:#999999;">: (</span><span style="color:#2E8F82;">Data</span><span style="color:#999999;"> &amp; </span><span style="color:#2E8F82;">VNodeProps</span><span style="color:#999999;">) | </span><span style="color:#AB5959;">null</span><span style="color:#999999;"> =</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">children</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;"> =</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">patchFlag</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">dynamicProps</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">[] | </span><span style="color:#AB5959;">null</span><span style="color:#999999;"> =</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">shapeFlag</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;"> =</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">type</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Fragment</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ShapeFlags</span><span style="color:#999999;">.</span><span style="color:#B07D48;">ELEMENT</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">isBlockNode</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">needFullChildrenNormalization</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span></span>
<span class="line"><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">VNode</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">vnode</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">ref</span><span style="color:#999999;">: </span><span style="color:#B07D48;">props</span><span style="color:#999999;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#999999;"> </span><span style="color:#59873A;">normalizeRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">props</span><span style="color:#999999;">),</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">  };</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p><strong>总结：赋值给组件 ref 的值是 getComponentPublicInstance 的返回值，而 getComponentPublicInstance 的返回值获取的是 setup 函数里执行的 exposed 函数的结果。</strong></p>`,72),e=[o];function c(t,r,y,A,B,D){return n(),a("div",null,e)}const F=s(l,[["render",c]]);export{C as __pageData,F as default};
