import{_ as s,o as a,c as n,X as l}from"./chunks/framework.b5b468c2.js";const o="/assets/2024-12-27-0c019bf40235a114717db945c9c4dd21acf2b2aeb22e0a03d506a319d647db94.0c019bf4.png",D=JSON.parse('{"title":"MessageChannle的用法详解","description":"","frontmatter":{"title":"MessageChannle的用法详解","author":"DBAAZzz","date":"2024/12/26 23:35","categories":["MessageChannel"],"tags":["时间切片、MessageChannel、订阅发布、异步"]},"headers":[],"relativePath":"courses/杂项/01-KON!/02-MessageChannle的用法详解.md","filePath":"courses/杂项/01-KON!/02-MessageChannle的用法详解.md","lastUpdated":1743417010000}'),e={name:"courses/杂项/01-KON!/02-MessageChannle的用法详解.md"},p=l(`<h1 id="messagechannel-的用法详解" tabindex="-1">MessageChannel 的用法详解 <a class="header-anchor" href="#messagechannel-的用法详解" aria-label="Permalink to &quot;MessageChannel 的用法详解&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p><code>MessageChannel</code> 创建了一个新的消息通道，其中包含两个 <code>MessagePort</code> 对象，分别是 <code>port1</code> 和 <code>port2</code>。</p><p>这两个端口可以进行双向通信。每个端口可以通过 <code>postMessage</code> 方法向对方发送消息，而接收消息的端口可以监听 <code>message</code> 事件来接收消息。</p><h2 id="用法和属性" tabindex="-1">用法和属性 <a class="header-anchor" href="#用法和属性" aria-label="Permalink to &quot;用法和属性&quot;">​</a></h2><h3 id="port1-和-port2" tabindex="-1"><code>port1</code> 和 <code>port2</code> <a class="header-anchor" href="#port1-和-port2" aria-label="Permalink to &quot;\`port1\` 和 \`port2\`&quot;">​</a></h3><ul><li><code>MessageChannel</code> 实例包含两个端口 (<code>port1</code> 和 <code>port2</code>)，它们都是 <code>MessagePort</code> 类型。</li><li>这两个端口可以独立地接收和发送消息，消息通过调用 <code>port.postMessage()</code> 来发送。 port.postMessage(message)</li></ul><h3 id="port-postmessage-message" tabindex="-1">port.postMessage(message) <a class="header-anchor" href="#port-postmessage-message" aria-label="Permalink to &quot;port.postMessage(message)&quot;">​</a></h3><ul><li>该方法用于向与之连接的另一端口发送消息。</li><li><code>message</code> 可以是任何可以被复制的对象（基本数据类型、对象、数组等）。</li></ul><h3 id="port-onmessage" tabindex="-1">port.onmessage <a class="header-anchor" href="#port-onmessage" aria-label="Permalink to &quot;port.onmessage&quot;">​</a></h3><ul><li>用于监听从另一端口发送过来的消息。通过设置 <code>port.onmessage</code> 事件处理程序来接收消息。</li></ul><h3 id="port-start" tabindex="-1">port.start() <a class="header-anchor" href="#port-start" aria-label="Permalink to &quot;port.start()&quot;">​</a></h3><ul><li>默认情况下，<code>MessagePort</code> 在创建时处于关闭状态。要使其开始接收消息，必须调用 <code>port.start()</code>。</li><li>通常在创建 <code>MessageChannel</code> 后，<strong><code>port.start()</code> 会自动调用</strong>，但如果需要在特定时机启动消息接收，则可以手动调用。</li></ul><h3 id="port-close" tabindex="-1">port.close() <a class="header-anchor" href="#port-close" aria-label="Permalink to &quot;port.close()&quot;">​</a></h3><ul><li>关闭端口，表示不再接收任何消息。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">channel</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MessageChannel</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">channel.port1.</span><span style="color:#DCBDFB;">onmessage</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">event</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Received:&#39;</span><span style="color:#ADBAC7;">, event.data)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">channel.port2.</span><span style="color:#DCBDFB;">postMessage</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Hello, world!&#39;</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">channel</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MessageChannel</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">channel</span><span style="color:#999999;">.</span><span style="color:#B07D48;">port1</span><span style="color:#999999;">.</span><span style="color:#59873A;">onmessage</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">event</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Received:</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">event</span><span style="color:#999999;">.</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">channel</span><span style="color:#999999;">.</span><span style="color:#B07D48;">port2</span><span style="color:#999999;">.</span><span style="color:#59873A;">postMessage</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Hello, world!</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span></code></pre></div><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><p><code>MessageChannel</code> 的“异步任务调度”能力，是指通过它可以将任务分解为小块，按照特定的优先级或时间片调度任务的执行，而不会阻塞主线程。</p><p><code>MessageChannel</code> 本质是一个轻量级的消息队列。通过它，可以将任务推送到消息队列中，并异步触发消息处理逻辑。相比传统的异步方法（如 <code>setTimeout</code>），<code>MessageChannel</code> 的调度更加高效且精准。</p><h3 id="消息传递是异步的" tabindex="-1">消息传递是异步的 <a class="header-anchor" href="#消息传递是异步的" aria-label="Permalink to &quot;消息传递是异步的&quot;">​</a></h3><ul><li><code>port2.postMessage()</code> 会将消息发送到消息队列中，而不会阻塞当前执行的代码。</li><li>消息被接收（通过 <code>port1.onmessage</code>）后，<strong>会在下一次事件循环中异步执行</strong>。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">channel</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MessageChannel</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">channel.port2.</span><span style="color:#DCBDFB;">onmessage</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ({ </span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;"> }) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;port2 接受到消息&#39;</span><span style="color:#ADBAC7;">, data)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;port1 发送消息&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Promise</span><span style="color:#ADBAC7;">((</span><span style="color:#F69D50;">resolve</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">resolve</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">}).</span><span style="color:#DCBDFB;">then</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;then 执行&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">setTimeout</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;setTimeout 执行1&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">channel.port1.</span><span style="color:#DCBDFB;">postMessage</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Hello1&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">channel.port1.</span><span style="color:#DCBDFB;">postMessage</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Hello2&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">setTimeout</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;setTimeout 执行2&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">setTimeout</span><span style="color:#ADBAC7;">(() </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;setTimeout 执行3&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 输出：</span></span>
<span class="line"><span style="color:#768390;">// port1 发送消息</span></span>
<span class="line"><span style="color:#768390;">// then 执行</span></span>
<span class="line"><span style="color:#768390;">// setTimeout 执行1</span></span>
<span class="line"><span style="color:#768390;">// port2 接受到消息 Hello1</span></span>
<span class="line"><span style="color:#768390;">// setTimeout 执行2</span></span>
<span class="line"><span style="color:#768390;">// setTimeout 执行3</span></span>
<span class="line"><span style="color:#768390;">// port2 接受到消息 Hello2</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">channel</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MessageChannel</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">channel</span><span style="color:#999999;">.</span><span style="color:#B07D48;">port2</span><span style="color:#999999;">.</span><span style="color:#59873A;">onmessage</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">data</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">port2 接受到消息</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">port1 发送消息</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">}).</span><span style="color:#59873A;">then</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">then 执行</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">setTimeout 执行1</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">channel</span><span style="color:#999999;">.</span><span style="color:#B07D48;">port1</span><span style="color:#999999;">.</span><span style="color:#59873A;">postMessage</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Hello1</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">channel</span><span style="color:#999999;">.</span><span style="color:#B07D48;">port1</span><span style="color:#999999;">.</span><span style="color:#59873A;">postMessage</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Hello2</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">setTimeout 执行2</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">setTimeout 执行3</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 输出：</span></span>
<span class="line"><span style="color:#A0ADA0;">// port1 发送消息</span></span>
<span class="line"><span style="color:#A0ADA0;">// then 执行</span></span>
<span class="line"><span style="color:#A0ADA0;">// setTimeout 执行1</span></span>
<span class="line"><span style="color:#A0ADA0;">// port2 接受到消息 Hello1</span></span>
<span class="line"><span style="color:#A0ADA0;">// setTimeout 执行2</span></span>
<span class="line"><span style="color:#A0ADA0;">// setTimeout 执行3</span></span>
<span class="line"><span style="color:#A0ADA0;">// port2 接受到消息 Hello2</span></span></code></pre></div><p>令人疑惑的是：结果不是 <code>setTimeout</code> 全部执行完毕后再执行低优先级的 <code>MessageChannel</code>。而是执行了 <code>MessageChannel</code> 之后再执行后续的 <code>setTimeout</code>。下图是 MessageChannel 的官方资料：</p><p><img src="`+o+'" alt="图 0"></p><p>具体原因可以看：</p><h3 id="messageport-的消息队列" tabindex="-1">MessagePort 的消息队列 <a class="header-anchor" href="#messageport-的消息队列" aria-label="Permalink to &quot;MessagePort 的消息队列&quot;">​</a></h3><ul><li>每个 <code>MessagePort</code> 都有一个 任务源（<code>task source</code>），称为 端口消息队列（<code>port message queue</code>）。</li><li>消息队列状态 <ul><li>消息队列可以被启用或禁用，初始状态为禁用</li><li>一旦消息队列启用，就不能再禁用</li></ul></li><li><code>MessagePort</code> 还拥有一个 &quot;<code>has been shipped</code>&quot; 标志，初始值为 <code>false</code></li></ul><h3 id="消息队列与事件循环" tabindex="-1">消息队列与事件循环 <a class="header-anchor" href="#消息队列与事件循环" aria-label="Permalink to &quot;消息队列与事件循环&quot;">​</a></h3><ul><li><strong>当端口的消息队列启用时，事件循环会必须将其当作其任务源之一</strong></li><li>如果 <code>MessagePort</code> 所关联的全局对象（如 Window）处于活动状态（<code>fully active</code>），消息队列的任务会被加入事件循环中</li></ul><h3 id="未发货的端口消息队列" tabindex="-1">未发货的端口消息队列 <a class="header-anchor" href="#未发货的端口消息队列" aria-label="Permalink to &quot;未发货的端口消息队列&quot;">​</a></h3><p>“未发货的端口消息队列”是 事件循环的一个虚拟任务源，专门用于管理以下类型的 <code>MessagePort</code>：</p><ul><li><code>has been shipped</code> 标志为 <code>false</code> 的 <code>MessagePort。</code></li><li>消息队列已启用，但还没有被传递给其他端口或对象。</li></ul><p>如果 <code>has been shipped</code> 标志为 <code>false</code>，则 <code>MessagePort</code> 的消息队列会被事件循环忽略（实际使用的是未发货队列）</p><h3 id="has-been-shipped-标志" tabindex="-1">&quot;has been shipped&quot; 标志 <a class="header-anchor" href="#has-been-shipped-标志" aria-label="Permalink to &quot;&quot;has been shipped&quot; 标志&quot;">​</a></h3><ul><li>当 <code>MessagePort</code> 被传递给其他端口或对象时，其<code>has been shipped</code> 标志会设为 <code>true</code>。</li><li>一旦标志为 <code>true</code>，其消息队列会作为一个正式的任务源使用，不受未发货消息队列的影响</li></ul><hr><p>总结：这也就是为什么 <code>MessageChannel</code> 的消息队列会在 <code>setTimeout</code> 之前执行一次的原因，当该队列处于 <code>enabled</code> 状态时，<code>event loop</code> 必须执行一个 <code>port message queue</code> 中的任务。</p><h2 id="为什么需要异步任务调度" tabindex="-1">为什么需要异步任务调度 <a class="header-anchor" href="#为什么需要异步任务调度" aria-label="Permalink to &quot;为什么需要异步任务调度&quot;">​</a></h2><h3 id="主线程阻塞问题" tabindex="-1">主线程阻塞问题： <a class="header-anchor" href="#主线程阻塞问题" aria-label="Permalink to &quot;主线程阻塞问题：&quot;">​</a></h3><ul><li>浏览器的主线程（UI 渲染线程）负责处理 <code>JavaScript</code> 执行、页面布局、绘制等工作。</li><li>如果 <code>JavaScript</code> 中执行一个大任务，比如计算或 <code>DOM</code> 操作，主线程可能会被长时间占用，导致页面卡顿，用户体验变差。</li></ul><h3 id="解决方案-时间切片" tabindex="-1">解决方案：时间切片 <a class="header-anchor" href="#解决方案-时间切片" aria-label="Permalink to &quot;解决方案：时间切片&quot;">​</a></h3><ul><li>将一个大任务切分成多个小任务，每个小任务执行时间尽量短（比如 <code>5ms</code> 内）。</li><li>小任务执行后主动让出主线程，让浏览器可以执行其他操作（如 UI 更新）</li><li>这种分段执行的机制可以通过 <code>MessageChannel</code> 实现，达到类似“时间切片”的效果</li></ul><h2 id="与订阅发布模式的区别" tabindex="-1">与订阅发布模式的区别 <a class="header-anchor" href="#与订阅发布模式的区别" aria-label="Permalink to &quot;与订阅发布模式的区别&quot;">​</a></h2><table><thead><tr><th>特性</th><th>MessageChannel</th><th>传统发布-订阅模式</th></tr></thead><tbody><tr><td><strong>通信机制</strong></td><td>基于两个固定的端口双向通信</td><td>多个发布者和订阅者通过中间代理</td></tr><tr><td><strong>中间代理</strong></td><td>无需中间代理，端口直接通信</td><td>通常需要一个“事件总线”或中介</td></tr><tr><td><strong>订阅数量</strong></td><td>每个端口只能与另一个端口通信</td><td>可以有多个订阅者订阅同一个事件</td></tr><tr><td><strong>解耦程度</strong></td><td>两端直接通信，相对耦合较低</td><td>发布者和订阅者完全解耦</td></tr><tr><td><strong>实现复杂性</strong></td><td>提供浏览器级原生实现，使用简单</td><td>通常需要手动实现发布-订阅模式</td></tr><tr><td><strong>异步特性</strong></td><td>基于异步消息传递，性能优越</td><td>可以同步或异步，依赖实现方式</td></tr></tbody></table>',44),t=[p];function c(r,y,i,d,A,h){return a(),n("div",null,t)}const g=s(e,[["render",c]]);export{D as __pageData,g as default};
