import{_ as s,o as a,c as n,X as p}from"./chunks/framework.6625828e.js";const d=JSON.parse('{"title":"元组类型","description":"","frontmatter":{"title":"元组类型","author":"DBAAZzz","date":"2023/09/25 00:00","categories":["TypeScript入门学习"],"tags":["TypeScript","元组"]},"headers":[],"relativePath":"courses/typescript/01-基础学习/04-TypeScript的元组类型.md","filePath":"courses/typescript/01-基础学习/04-TypeScript的元组类型.md","lastUpdated":1710431360000}'),l={name:"courses/typescript/01-基础学习/04-TypeScript的元组类型.md"},o=p(`<h1 id="typescript-的元组类型" tabindex="-1">TypeScript 的元组类型 <a class="header-anchor" href="#typescript-的元组类型" aria-label="Permalink to &quot;TypeScript 的元组类型&quot;">​</a></h1><p>元组 <code>tuple</code> 是 <code>TypeScript</code> 特有的数据类型，JavaScript 没有单独区分这种类型。它表示成员类型可以自由设置的数组，<strong>即数组的各个成员的类型可以不同</strong>。</p><p>由于成员的类型可以不一样，所以元组必须明确声明每个成员的类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">s</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#96D0FF;">&#39;a&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;b&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">s</span><span style="color:#999999;">: [</span><span style="color:#2E8F82;">string</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">] =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">b</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">];</span></span></code></pre></div><p>数组的成员类型写在方括号外面（<code>number[]</code>），元组的成员类型是写在方括号里面（<code>[number]</code>）。<code>TypeScript</code> 的区分方法就是，成员类型写在方括号里面的就是元组，写在外面的就是数组。</p><p>元组成员的类型可以添加问号后缀（?），表示该成员是可选的。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> a</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">number</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">a</span><span style="color:#999999;">: [</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">number</span><span style="color:#AB5959;">?</span><span style="color:#999999;">] =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">];</span></span></code></pre></div><p><strong>注意，问号只能用于元组的尾部成员，也就是说，所有可选成员必须在必选成员之后。</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">myTuple</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">number</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">string</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">myTuple</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">number</span><span style="color:#AB5959;">?</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">string</span><span style="color:#AB5959;">?</span><span style="color:#999999;">];</span></span></code></pre></div><p>上面示例中，元组 <code>myTuple</code> 的最后两个成员是可选的。也就是说，它的成员数量可能有两个、三个和四个。</p><p>由于需要声明每个成员的类型，所以大多数情况下，元组的成员数量是有限的，从类型声明就可以明确知道，元组包含多少个成员，越界的成员会报错。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#96D0FF;">&#39;a&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;b&#39;</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">x[</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;c&#39;</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: [</span><span style="color:#2E8F82;">string</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">] =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">b</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">x</span><span style="color:#999999;">[</span><span style="color:#2F798A;">2</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">c</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span></code></pre></div><h2 id="读取元组的成员类型" tabindex="-1">读取元组的成员类型 <a class="header-anchor" href="#读取元组的成员类型" aria-label="Permalink to &quot;读取元组的成员类型&quot;">​</a></h2><p>元组可以通过方括号，读取成员类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Tuple</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Age</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Tuple</span><span style="color:#ADBAC7;">[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// number</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Tuple</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2E8F82;">string</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Age</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Tuple</span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">];</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// number</span></span></code></pre></div><p>由于元组的成员都是数值索引，即索引类型都是 <code>number</code>，所以可以像下面这样读取。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Tuple</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">Date</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">TupleEl</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Tuple</span><span style="color:#ADBAC7;">[</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// string|number|Date</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Tuple</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2E8F82;">string</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Date</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">TupleEl</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Tuple</span><span style="color:#999999;">[</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">];</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// string|number|Date</span></span></code></pre></div><p>上面示例中，<code>Tuple[number]</code> 表示元组 <code>Tuple</code> 的所有数值索引的成员类型，所以返回 <code>string|number|Date</code>，即这个类型是三种值的联合类型。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>获取元组的成员类型，在体操类型中可能用到</p></div><h2 id="只读元组" tabindex="-1">只读元组 <a class="header-anchor" href="#只读元组" aria-label="Permalink to &quot;只读元组&quot;">​</a></h2><p>元组也可以是只读的，不允许修改，有两种写法。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 写法一</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">t</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">readonly</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 写法二</span></span>
<span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">t</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Readonly</span><span style="color:#ADBAC7;">&lt;[</span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">]&gt;;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 写法一</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">t</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 写法二</span></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">t</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Readonly</span><span style="color:#999999;">&lt;[</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">]&gt;;</span></span></code></pre></div><h2 id="元组的具体使用场景" tabindex="-1">元组的具体使用场景 <a class="header-anchor" href="#元组的具体使用场景" aria-label="Permalink to &quot;元组的具体使用场景&quot;">​</a></h2><ol><li>处理异构数据</li></ol><p>当你需要处理异构（不同类型）的数据结构时，元组类型可以很方便地表示和操作这些数据。例如，解析 <code>CSV</code> 文件时，每行可能包含不同类型的数据，你可以使用元组来表示每一行的数据。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">CSVRow</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">csvData</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">CSVRow</span><span style="color:#ADBAC7;">[] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span></span>
<span class="line"><span style="color:#ADBAC7;">  [</span><span style="color:#96D0FF;">&#39;Alice&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">],</span></span>
<span class="line"><span style="color:#ADBAC7;">  [</span><span style="color:#96D0FF;">&#39;Bob&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">],</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">CSVRow</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2E8F82;">string</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">csvData</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">CSVRow</span><span style="color:#999999;">[] =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Alice</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">30</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Bob</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">25</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">];</span></span></code></pre></div>`,26),e=[o];function t(c,r,y,A,i,B){return a(),n("div",null,e)}const C=s(l,[["render",t]]);export{d as __pageData,C as default};
