import{_ as e,o as t,c,X as a}from"./chunks/framework.b5b468c2.js";const i="/assets/2023-09-24-8e5c645f4704f7cba3cb51049eadd2bdc2090170400ab5664e9104b36aaab966.8e5c645f.png",S=JSON.parse('{"title":"typescript入门学习","description":"","frontmatter":{"title":"typescript入门学习","author":"DBAAZzz","date":"2023/09/24 10:24","categories":["typescript入门学习"],"tags":["TypeScript"]},"headers":[],"relativePath":"courses/typescript/index.md","filePath":"courses/typescript/index.md","lastUpdated":1696836772000}'),o={name:"courses/typescript/index.md"},p=a('<h1 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h1><p><code>TypeScript</code> 是 <code>JavaScript</code> 的超集，意味着它能做 <code>JavaScript</code> 所做的一切，但有一些附加功能。</p><p>使用 <code>TypeScript</code> 的主要原因是<strong>为 JavaScript 添加静态类型</strong>。静态类型意味着变量的类型在程序中的任何时候都不能被改变。它可以防止大量的 bug</p><p>为 <code>JavaScript</code> 添加静态类的原因至少有三个：</p><ul><li>可以避免经典的错误 <code>&#39;undefined&#39; is not a function</code>.</li><li>在不严重破坏代码的情况下，重构代码更容易。</li><li>使大型、复杂的应用程序源码更易阅读。</li></ul><p><code>TypeScript</code> 的优势具体表现为：</p><ol><li>类型系统是最好的文档，大部分的函数看类型的定义就知道如何使用</li><li>可以在编译阶段就发现大部分的错误，而不需要在运行时发现错误</li><li>增加了编辑器和 IDEA 的功能，包括代码补全、接口提示、跳转到定义、重构等等</li></ol><p><img src="'+i+'" alt="图 0"></p><h2 id="类型的概念" tabindex="-1">类型的概念 <a class="header-anchor" href="#类型的概念" aria-label="Permalink to &quot;类型的概念&quot;">​</a></h2><p><strong>类型是人为添加的一种编程约束和用法提示</strong></p>',10),r=[p];function s(d,n,l,_,u,h){return t(),c("div",null,r)}const y=e(o,[["render",s]]);export{S as __pageData,y as default};
