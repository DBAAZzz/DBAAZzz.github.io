import{_ as s,o as n,c as a,X as p}from"./chunks/framework.b5b468c2.js";const C=JSON.parse('{"title":"any、unknow、never 类型","description":"","frontmatter":{"title":"any、unknow、never 类型","author":"DBAAZzz","date":"2023/09/25 00:00","categories":["TypeScript入门学习"],"tags":["TypeScript"]},"headers":[],"relativePath":"courses/typescript/01-基础学习/02-TypeScript的any、unknow、never 类型.md","filePath":"courses/typescript/01-基础学习/02-TypeScript的any、unknow、never 类型.md","lastUpdated":1696838737000}'),l={name:"courses/typescript/01-基础学习/02-TypeScript的any、unknow、never 类型.md"},o=p(`<h1 id="typescript-的-any、unknow、never-类型" tabindex="-1">TypeScript 的 any、unknow、never 类型 <a class="header-anchor" href="#typescript-的-any、unknow、never-类型" aria-label="Permalink to &quot;TypeScript 的 any、unknow、never 类型&quot;">​</a></h1><h2 id="any-类型" tabindex="-1">any 类型 <a class="header-anchor" href="#any-类型" aria-label="Permalink to &quot;any 类型&quot;">​</a></h2><p>any 类型表示没有任何限制，该类型的变量可以赋予任意类型的值</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 正确</span></span>
<span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;foo&#39;</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 正确</span></span>
<span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 正确</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span>
<span class="line"><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">foo</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span>
<span class="line"><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span></code></pre></div><p>变量类型一旦设为 any，TypeScript 实际上会关闭这个变量的类型检查，即使有明显的类型错误，只要句法正确，都不会报错。</p><p>总之，TypeScript 认为，只要开发者使用了 any 类型，就表示开发者想要自己来处理这些代码，所以就不对 any 类型进行任何限制，怎么使用都可以。</p><p>从集合论的角度看，any 类型可以看成是所有其他类型的全集，<strong>包含了一切可能的类型</strong>。TypeScript 将这种类型称为“顶层类型”（top type），意为涵盖了所有下层。</p><h3 id="类型推断问题" tabindex="-1">类型推断问题 <a class="header-anchor" href="#类型推断问题" aria-label="Permalink to &quot;类型推断问题&quot;">​</a></h3><p>对于开发者没有指定类型，TypeScript 必须自己推断那些变量的类型，如果无法推断出类型，TypeScript 就会认为该变量的类型为 any</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// x 和 y 变量被推断为 any 类型</span></span>
<span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">x</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">y</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> x </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> y;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, [</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">]); </span><span style="color:#768390;">// 不报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// x 和 y 变量被推断为 any 类型</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">add</span><span style="color:#999999;">(</span><span style="color:#B07D48;">x</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">y</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">y</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">add</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">]);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 不报错</span></span></code></pre></div><p>由于 TypeScript 无法推断出他们的类型，就会认为 x 和 y 变量的类型为 any，这样就后续就不会对 add 函数进行类型检查了。</p><p>显然这是一个很糟糕的情况，对于那些类型不明显的变量一定要显式声明类型，防止被推断为 any 类型。</p><p>TypeScript 还提供了一个编译选项 noImplicitAny，打开该选项，只要推断出 any 类型就会报错。</p><h3 id="any-带来的污染问题" tabindex="-1">any 带来的污染问题 <a class="header-anchor" href="#any-带来的污染问题" aria-label="Permalink to &quot;any 带来的污染问题&quot;">​</a></h3><p>any 类型除了关闭类型检查，还有一个很大的问题，就是它会“污染”其他的变量。它可以赋值给其他任何类型的变量，导致其他变量出错。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;hello&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> y</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">y </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x; </span><span style="color:#768390;">// 编译不报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">y </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">123</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 编译不报错</span></span>
<span class="line"><span style="color:#ADBAC7;">y.</span><span style="color:#DCBDFB;">toFixed</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 编译不报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">y</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">y</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">x</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 编译不报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">y</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">*</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">123</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 编译不报错</span></span>
<span class="line"><span style="color:#B07D48;">y</span><span style="color:#999999;">.</span><span style="color:#59873A;">toFixed</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 编译不报错</span></span></code></pre></div><p>上面的例子中，变量 x 是一个 any 类型，实际的值是一个字符串。变量 y 是一个 number 类型，但是它被赋值为 x，静态类型编译阶段并不会报错。后面对变量 y 的一系列的数值运算，TypeScript 也检查不出问题。</p><p>这样问题就留到运行时才会暴露。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>污染其他具有正确类型的变量，把错误留到运行时，这就是不宜使用 any 类型的另一个主要原因。</p></div><h2 id="unknow-类型" tabindex="-1">unknow 类型 <a class="header-anchor" href="#unknow-类型" aria-label="Permalink to &quot;unknow 类型&quot;">​</a></h2><p>为了解决 any 类型带来的“污染”问题，TypeScript 引入了 unknow 类型。它与 any 含义相同，表示类型不确定，可能是任意类型。</p><p>但是它的使用有一些限制，不像 any 一样自由，可以看成是严格版的 any 类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 正确</span></span>
<span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 正确</span></span>
<span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Hello World&#39;</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 正确</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span>
<span class="line"><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">42</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span>
<span class="line"><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Hello World</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span></code></pre></div><p>上面示例中，变量 x 的类型是 unknown，可以赋值为各种类型的值。这与 any 的行为一致。</p><h3 id="unknow-的使用限制" tabindex="-1">unknow 的使用限制 <a class="header-anchor" href="#unknow-的使用限制" aria-label="Permalink to &quot;unknow 的使用限制&quot;">​</a></h3><p>unknown 类型跟 any 类型的不同之处在于，它不能直接使用。主要有以下几个限制：</p><ul><li>unknown 类型的变量，不能直接赋值给其他类型的变量（除了 any 类型和 unknown 类型）</li><li>不能直接调用 unknown 类型变量的方法和属性。</li><li>unknown 类型变量能够进行的运算是有限的，只能进行比较运算（运算符==、===、!=、!==、||、&amp;&amp;、?）、取反运算（运算符!）、typeof 运算符和 instanceof 运算符这几种，其他运算都会报错。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> v</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">123</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 不能直接赋值给其他类型的变量</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> v1</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> v; </span><span style="color:#768390;">// 报错</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> v2</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> v; </span><span style="color:#768390;">// 报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">v</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">123</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 不能直接赋值给其他类型的变量</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">v1</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">v</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">v2</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">v</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> v1</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { foo: </span><span style="color:#6CB6FF;">123</span><span style="color:#ADBAC7;"> };</span></span>
<span class="line"><span style="color:#ADBAC7;">v1.foo; </span><span style="color:#768390;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> v2</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;hello&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">v2.</span><span style="color:#DCBDFB;">trim</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">v3</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">n</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> n </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#DCBDFB;">v3</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">v1</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">foo</span><span style="color:#999999;">: </span><span style="color:#2F798A;">123</span><span style="color:#999999;"> };</span></span>
<span class="line"><span style="color:#B07D48;">v1</span><span style="color:#999999;">.</span><span style="color:#B07D48;">foo</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">v2</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">v2</span><span style="color:#999999;">.</span><span style="color:#59873A;">trim</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#59873A;">v3</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">n</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">n</span><span style="color:#AB5959;"> + </span><span style="color:#2F798A;">1</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#59873A;">v3</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> a</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">a </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 报错</span></span>
<span class="line"><span style="color:#ADBAC7;">a </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 正确</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">a</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span></code></pre></div><p>那么，怎么才能使用 unknown 类型变量呢？</p><p>答案是只有经过“类型缩小”，unknown 类型变量才可以使用。<strong>所谓“类型缩小”，就是缩小 unknown 变量的类型范围，确保不会出错。</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> a</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">typeof</span><span style="color:#ADBAC7;"> a </span><span style="color:#F47067;">===</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;number&#39;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> r </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> a </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 正确</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">a</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">number</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">let </span><span style="color:#B07D48;">r</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">a</span><span style="color:#AB5959;"> + </span><span style="color:#2F798A;">10</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 正确</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>unknown 可以看作是更安全的 any。一般来说，凡是需要设为 any 类型的地方，通常都应该优先考虑设为 unknown 类型。</p><h2 id="never-类型" tabindex="-1">never 类型 <a class="header-anchor" href="#never-类型" aria-label="Permalink to &quot;never 类型&quot;">​</a></h2><p>由于不存在任何属于“空类型”的值，所以该类型被称为 never，即不可能有这样的值。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> x</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">never</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> foo</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">never</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">123</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 报错 number 类型不能赋值给 never 类型</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">never</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">foo</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">never</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">123</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错 number 类型不能赋值给 never 类型</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">f</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">never</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">throw</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Error</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Error&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> v1</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">number</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">f</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 不报错</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> v2</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">f</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 不报错</span></span>
<span class="line"><span style="color:#F47067;">let</span><span style="color:#ADBAC7;"> v3</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">f</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 不报错</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">f</span><span style="color:#999999;">():</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">never</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">throw</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Error</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Error</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">v1</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">f</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 不报错</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">v2</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">f</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 不报错</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">v3</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">f</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 不报错</span></span></code></pre></div><p>函数 f()会抛出错误，所以返回值类型可以写成 never，即不可能返回任何值。各种其他类型的变量都可以赋值为 f()的运行结果（never 类型）。</p><p>为什么 never 类型可以赋值给任意其他类型呢？这也跟集合论有关，空集是任何集合的子集。TypeScript 就相应规定，任何类型都包含了 never 类型。因此，never 类型是任何其他类型所共有的，TypeScript 把这种情况称为“底层类型”（bottom type）。</p><p>总之，TypeScript 有两个“顶层类型”（any 和 unknown），但是“底层类型”只有 never 唯一一个。</p><h3 id="与-void-的区别" tabindex="-1">与 void 的区别 <a class="header-anchor" href="#与-void-的区别" aria-label="Permalink to &quot;与 void 的区别&quot;">​</a></h3><p>never 表示一个从来不会优雅的返回的函数时，你可能马上就会想到与此类似的 void，然而实际上，void 表示没有任何类型，never 表示永远不存在的值的类型。</p><p>当一个函数返回空值时，它的返回值为 void 类型，但是，当一个函数永不返回时（或者总是抛出错误），它的返回值为 never 类型。void 类型可以被赋值（在 strictNullChecking 为 false 时），但是除了 never 本身以外，其他任何类型不能赋值给 never。</p>`,44),e=[o];function t(c,r,y,A,i,B){return n(),a("div",null,e)}const F=s(l,[["render",t]]);export{C as __pageData,F as default};
